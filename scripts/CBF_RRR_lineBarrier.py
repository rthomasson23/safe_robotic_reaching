import numpy as np
from numpy import sin, cos
import time
import sys


m = np.array([0.643789, 0.643789, 0.58676])
L = np.array([.1, .1, 0.09328183])
l = np.array([0.0497183, 0.0497183, 0.0439482])
Ixx = np.array([0.00012193, 0.00012193, 0.00011395])
Iyy = np.array([0.00231219, 0.00231219, 0.00163762])
Izz = np.array([0.000724384, 0.000724384, 0.000503074])
z = 0

def LfB_proximal(q, L, l, m, Ixx, Iyy, Izz, z, lx, ly, nx, ny, pcx, pcy):
    q1 = q[0]

    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q4 = q[3]
    q5 = q[4]
    q6 = q[5]

    m1 = m[0]
    m2 = m[1]
    m3 = m[2]

    l1 = l[0]
    l2 = l[1]
    l3 = l[2]

    L1 = L[0]
    L2 = L[1]
    L3 = L[2]

    Ixx1 = Ixx[0]
    Ixx2 = Ixx[1]
    Ixx3 = Ixx[2]

    Iyy1 = Iyy[0]
    Iyy2 = Iyy[1]
    Iyy3 = Iyy[2]

    Izz1 = Izz[0]
    Izz2 = Izz[1]
    Izz3 = Izz[2]

    lx1 = lx[0]
    ly1 = ly[0]
    lx2 = lx[1]
    ly2 = ly[1]
    lx3 = lx[2]
    ly3 = ly[2]

    LfB_proximal = - q4*(ly1*nx*cos(q1) - lx1*ny*cos(q1) + lx1*nx*sin(q1) + ly1*ny*sin(q1) + lx1*nx*q4*cos(q1) + ly1*ny*q4*cos(q1) + lx1*ny*q4*sin(q1) - ly1*nx*q4*sin(q1)) - (2*(ly1*nx*cos(q1) - lx1*ny*cos(q1) + lx1*nx*sin(q1) + ly1*ny*sin(q1))*((Izz3*L1**2*l2**2*m2**2*q4**2*sin(2*q2))/2 + Izz2*L1*l3**3*m3**2*q4**2*sin(q2 + q3) - Izz2*L1*l3**3*m3**2*q5**2*sin(q2 + q3) - Izz2*L1*l3**3*m3**2*q6**2*sin(q2 + q3) + Izz3*L1*L2**3*m3**2*q4**2*sin(q2) - Izz3*L1*L2**3*m3**2*q5**2*sin(q2) + (Izz2*L1**2*l3**2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 + Izz3*L1*l2**3*m2**2*q4**2*sin(q2) - Izz3*L1*l2**3*m2**2*q5**2*sin(q2) - L1*L2**2*l3**3*m3**3*q5**2*sin(q2 + q3) - L1*L2**3*l3**2*m3**3*q5**2*sin(q2) + (L1*L2**2*l3**3*m3**3*q5**2*sin(q2 - q3))/2 + (L1*L2**3*l3**2*m3**3*q5**2*sin(q2 - 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q5**2*sin(q2 + 2*q3))/2 + (L1*L2**2*l3**3*m3**3*q5**2*sin(q2 + 3*q3))/2 + (Izz3*L1**2*L2**2*m3**2*q4**2*sin(2*q2))/2 + L1*l2**2*l3**3*m2*m3**2*q4**2*sin(q2 + q3) - L1*l2**2*l3**3*m2*m3**2*q5**2*sin(q2 + q3) - L1*l2**2*l3**3*m2*m3**2*q6**2*sin(q2 + q3) + Izz3*L1**2*l2**2*m2**2*q4*q5*sin(2*q2) + (L1**2*l2**2*l3**2*m2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 - 2*Izz2*L1*l3**3*m3**2*q5*q6*sin(q2 + q3) + L1*l2**3*l3**2*m2**2*m3*q4**2*sin(q2) - L1*l2**3*l3**2*m2**2*m3*q5**2*sin(q2) + Izz2*L1**2*l3**2*m3**2*q4*q5*sin(2*q2 + 2*q3) + Izz2*L1**2*l3**2*m3**2*q4*q6*sin(2*q2 + 2*q3) + (Izz3*L1*L2**2*l3*m3**2*q4**2*sin(q2 + q3))/2 - (3*Izz3*L1*L2**2*l3*m3**2*q5**2*sin(q2 + q3))/2 - (Izz3*L1*L2**2*l3*m3**2*q6**2*sin(q2 + q3))/2 - (L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q2))/2 - (L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q3))/2 - L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 + q3) - L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 + q3) + (Izz2*L1*L2*l3**2*m3**2*q4**2*sin(q2))/2 - (3*Izz2*L1*L2*l3**2*m3**2*q5**2*sin(q2))/2 + Izz2*Izz3*L1*l3*m3*q4**2*sin(q2 + q3) - Izz2*Izz3*L1*l3*m3*q5**2*sin(q2 + q3) - Izz2*Izz3*L1*l3*m3*q6**2*sin(q2 + q3) + (L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q2 + 2*q3))/2 + Izz2*Izz3*L1*L2*m3*q4**2*sin(q2) - Izz2*Izz3*L1*L2*m3*q5**2*sin(q2) - L1*L2**3*l3**2*m3**3*q4*q5*sin(q2) - L1*L2**3*l3**2*m3**3*q4*q6*sin(q2) - L1*L2**3*l3**2*m3**3*q5*q6*sin(q2) + (Izz2*L1*L2*l3**2*m3**2*q4**2*sin(q2 + 2*q3))/2 + (Izz3*L1*L2**2*l3*m3**2*q4**2*sin(q2 - q3))/2 + (Izz2*L1*L2*l3**2*m3**2*q5**2*sin(q2 + 2*q3))/2 + (Izz3*L1*L2**2*l3*m3**2*q5**2*sin(q2 - q3))/2 - (Izz3*L1*L2**2*l3*m3**2*q6**2*sin(q2 - q3))/2 + Izz2*Izz3*L1*l2*m2*q4**2*sin(q2) - Izz2*Izz3*L1*l2*m2*q5**2*sin(q2) + (L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 - q3))/2 + (L1*L2**3*l3**2*m3**3*q4*q5*sin(q2 - 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q4*q5*sin(q2 + 2*q3))/2 + (L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 + 3*q3))/2 + (L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 - q3))/2 + (L1*L2**3*l3**2*m3**3*q4*q6*sin(q2 - 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q4*q6*sin(q2 + 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q5*q6*sin(q2 - 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q5*q6*sin(q2 + 2*q3))/2 + (L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 + 3*q3))/2 + (L1**2*l2**2*l3**2*m2**2*m3*q4**2*sin(2*q2))/2 + Izz3*L1**2*L2**2*m3**2*q4*q5*sin(2*q2) + L1**2*l2**2*l3**2*m2**2*m3*q4*q5*sin(2*q2) - (L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 - 2*L1*l2**2*l3**3*m2*m3**2*q5*q6*sin(q2 + q3) + L1**2*l2**2*l3**2*m2*m3**2*q4*q5*sin(2*q2 + 2*q3) + L1**2*l2**2*l3**2*m2*m3**2*q4*q6*sin(2*q2 + 2*q3) + (L1*L2*l2*l3**3*m2*m3**2*q4**2*sin(q2 - q3))/2 + (L1*L2*l2*l3**3*m2*m3**2*q5**2*sin(q2 - q3))/2 - (L1*L2*l2*l3**3*m2*m3**2*q6**2*sin(q2 - q3))/2 - Izz3*L1*L2**2*l3*m3**2*q4*q5*sin(q2 + q3) - 2*Izz3*L1*L2**2*l3*m3**2*q5*q6*sin(q2 + q3) + (L1*L2*l2**2*l3**2*m2*m3**2*q4**2*sin(q2))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q4**2*sin(q2))/2 - (3*L1*L2*l2**2*l3**2*m2*m3**2*q5**2*sin(q2))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q5**2*sin(q2))/2 + Izz3*L1*l2**2*l3*m2*m3*q4**2*sin(q2 + q3) - Izz3*L1*l2**2*l3*m2*m3*q5**2*sin(q2 + q3) - Izz3*L1*l2**2*l3*m2*m3*q6**2*sin(q2 + q3) + Izz3*L1*L2*l2**2*m2*m3*q4**2*sin(q2) + Izz3*L1*L2**2*l2*m2*m3*q4**2*sin(q2) - Izz3*L1*L2*l2**2*m2*m3*q5**2*sin(q2) - Izz3*L1*L2**2*l2*m2*m3*q5**2*sin(q2) - Izz2*L1*L2*l3**2*m3**2*q4*q5*sin(q2) - Izz2*L1*L2*l3**2*m3**2*q4*q6*sin(q2) - Izz2*L1*L2*l3**2*m3**2*q5*q6*sin(q2) + (L1*L2*l2**2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 + (L1*L2*l2**2*l3**2*m2*m3**2*q5**2*sin(q2 + 2*q3))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q5**2*sin(q2 - 2*q3))/2 - 2*Izz2*Izz3*L1*l3*m3*q5*q6*sin(q2 + q3) + Izz2*L1*l2*l3**2*m2*m3*q4**2*sin(q2) - Izz2*L1*l2*l3**2*m2*m3*q5**2*sin(q2) + Izz2*L1*L2*l3**2*m3**2*q4*q5*sin(q2 + 2*q3) + Izz3*L1*L2**2*l3*m3**2*q4*q5*sin(q2 - q3) + Izz2*L1*L2*l3**2*m3**2*q4*q6*sin(q2 + 2*q3) + Izz2*L1*L2*l3**2*m3**2*q5*q6*sin(q2 + 2*q3) + (L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q2))/2 - (L1*L2*l2*l3**3*m2*m3**2*q4**2*sin(q2 + q3))/2 - (L1*L2*l2*l3**3*m2*m3**2*q5**2*sin(q2 + q3))/2 + (L1*L2*l2*l3**3*m2*m3**2*q6**2*sin(q2 + q3))/2 + Izz3*L1**2*L2*l2*m2*m3*q4**2*sin(2*q2) + 2*Izz3*L1**2*L2*l2*m2*m3*q4*q5*sin(2*q2) - L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q2 + 2*q3) - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q2 + 2*q3))/2 + L1*L2*l2*l3**3*m2*m3**2*q4*q5*sin(q2 - q3) - (Izz3*L1*L2*l2*l3*m2*m3*q4**2*sin(q2 + q3))/2 - (Izz3*L1*L2*l2*l3*m2*m3*q5**2*sin(q2 + q3))/2 + (Izz3*L1*L2*l2*l3*m2*m3*q6**2*sin(q2 + q3))/2 - L1*L2*l2**2*l3**2*m2*m3**2*q4*q5*sin(q2) - L1*L2*l2**2*l3**2*m2*m3**2*q4*q6*sin(q2) - L1*L2*l2**2*l3**2*m2*m3**2*q5*q6*sin(q2) - 2*Izz3*L1*l2**2*l3*m2*m3*q5*q6*sin(q2 + q3) + L1*L2*l2**2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3) + (L1*L2**2*l2*l3**2*m2*m3**2*q4*q5*sin(q2 - 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3))/2 + L1*L2*l2**2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3) + (L1*L2**2*l2*l3**2*m2*m3**2*q4*q6*sin(q2 - 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3))/2 + L1*L2*l2**2*l3**2*m2*m3**2*q5*q6*sin(q2 + 2*q3) + (L1*L2**2*l2*l3**2*m2*m3**2*q5*q6*sin(q2 - 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q5*q6*sin(q2 + 2*q3))/2 + (Izz3*L1*L2*l2*l3*m2*m3*q4**2*sin(q2 - q3))/2 + (Izz3*L1*L2*l2*l3*m2*m3*q5**2*sin(q2 - q3))/2 - (Izz3*L1*L2*l2*l3*m2*m3*q6**2*sin(q2 - q3))/2 + L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q2) - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q2))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q3))/2 - L1*L2*l2*l3**3*m2*m3**2*q4*q5*sin(q2 + q3) - Izz3*L1*L2*l2*l3*m2*m3*q4*q5*sin(q2 + q3) + Izz3*L1*L2*l2*l3*m2*m3*q4*q5*sin(q2 - q3)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3))
    return LfB_proximal

def LgB_proximal(q, L, l, m, Ixx, Iyy, Izz, z, lx, ly, nx, ny, pcx, pcy):
    q1 = q[0]

    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q4 = q[3]
    q5 = q[4]
    q6 = q[5]

    m1 = m[0]
    m2 = m[1]
    m3 = m[2]

    l1 = l[0]
    l2 = l[1]
    l3 = l[2]

    L1 = L[0]
    L2 = L[1]
    L3 = L[2]

    Ixx1 = Ixx[0]
    Ixx2 = Ixx[1]
    Ixx3 = Ixx[2]

    Iyy1 = Iyy[0]
    Iyy2 = Iyy[1]
    Iyy3 = Iyy[2]

    Izz1 = Izz[0]
    Izz2 = Izz[1]
    Izz3 = Izz[2]

    lx1 = lx[0]
    ly1 = ly[0]
    lx2 = lx[1]
    ly2 = ly[1]
    lx3 = lx[2]
    ly3 = ly[2]

    LgB_proximal = [-(2*(ly1*nx*cos(q1) - lx1*ny*cos(q1) + lx1*nx*sin(q1) + ly1*ny*sin(q1))*(Izz2*Izz3 + L2**2*l3**2*m3**2 + Izz3*L2**2*m3 + Izz3*l2**2*m2 + Izz2*l3**2*m3 + l2**2*l3**2*m2*m3 - L2**2*l3**2*m3**2*cos(q3)**2))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3)), (2*(ly1*nx*cos(q1) - lx1*ny*cos(q1) + lx1*nx*sin(q1) + ly1*ny*sin(q1))*(Izz2*Izz3 + (L2**2*l3**2*m3**2)/2 + Izz3*L2**2*m3 + Izz3*l2**2*m2 + Izz2*l3**2*m3 + l2**2*l3**2*m2*m3 - (L2**2*l3**2*m3**2*cos(2*q3))/2 + (L1*L2*l3**2*m3**2*cos(q2))/2 + Izz3*L1*L2*m3*cos(q2) - (L1*L2*l3**2*m3**2*cos(q2 + 2*q3))/2 + Izz3*L1*l2*m2*cos(q2) + L1*l2*l3**2*m2*m3*cos(q2)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3)), -(2*L1*(ly1*nx*cos(q1) - lx1*ny*cos(q1) + lx1*nx*sin(q1) + ly1*ny*sin(q1))*(L2*l3**2*m3**2*cos(q2) - Izz2*l3*m3*cos(q2 + q3) + Izz3*L2*m3*cos(q2) + Izz3*l2*m2*cos(q2) - L2**2*l3*m3**2*cos(q2 + q3) - l2**2*l3*m2*m3*cos(q2 + q3) + l2*l3**2*m2*m3*cos(q2) - L2*l3**2*m3**2*cos(q2 + q3)*cos(q3) + L2**2*l3*m3**2*cos(q2)*cos(q3) + L2*l2*l3*m2*m3*cos(q2)*cos(q3)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3))]
    return LgB_proximal

def B_proximal(q, L, l, m, Ixx, Iyy, Izz, z, lx, ly, nx, ny, pcx, pcy):
    q1 = q[0]

    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q4 = q[3]
    q5 = q[4]
    q6 = q[5]

    m1 = m[0]
    m2 = m[1]
    m3 = m[2]

    l1 = l[0]
    l2 = l[1]
    l3 = l[2]

    L1 = L[0]
    L2 = L[1]
    L3 = L[2]

    Ixx1 = Ixx[0]
    Ixx2 = Ixx[1]
    Ixx3 = Ixx[2]

    Iyy1 = Iyy[0]
    Iyy2 = Iyy[1]
    Iyy3 = Iyy[2]

    Izz1 = Izz[0]
    Izz2 = Izz[1]
    Izz3 = Izz[2]

    lx1 = lx[0]
    ly1 = ly[0]
    lx2 = lx[1]
    ly2 = ly[1]
    lx3 = lx[2]
    ly3 = ly[2]

    B_proximal = ny*(ly1*cos(q1) - pcy + lx1*sin(q1)) - q4*(nx*(ly1*cos(q1) + lx1*sin(q1)) - ny*(lx1*cos(q1) - ly1*sin(q1))) - nx*(pcx - lx1*cos(q1) + ly1*sin(q1))
    return B_proximal

def LfB_medial(q, L, l, m, Ixx, Iyy, Izz, z, lx, ly, nx, ny, pcx, pcy):
    q1 = q[0]

    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q4 = q[3]
    q5 = q[4]
    q6 = q[5]

    m1 = m[0]
    m2 = m[1]
    m3 = m[2]

    l1 = l[0]
    l2 = l[1]
    l3 = l[2]

    L1 = L[0]
    L2 = L[1]
    L3 = L[2]

    Ixx1 = Ixx[0]
    Ixx2 = Ixx[1]
    Ixx3 = Ixx[2]

    Iyy1 = Iyy[0]
    Iyy2 = Iyy[1]
    Iyy3 = Iyy[2]

    Izz1 = Izz[0]
    Izz2 = Izz[1]
    Izz3 = Izz[2]

    lx1 = lx[0]
    ly1 = ly[0]
    lx2 = lx[1]
    ly2 = ly[1]
    lx3 = lx[2]
    ly3 = ly[2]

    LfB_medial = - q5*(ly2*nx*cos(q1 + q2) - lx2*ny*cos(q1 + q2) + lx2*nx*sin(q1 + q2) + ly2*ny*sin(q1 + q2) + lx2*nx*q4*cos(q1 + q2) + lx2*nx*q5*cos(q1 + q2) + ly2*ny*q4*cos(q1 + q2) + ly2*ny*q5*cos(q1 + q2) + lx2*ny*q4*sin(q1 + q2) - ly2*nx*q4*sin(q1 + q2) + lx2*ny*q5*sin(q1 + q2) - ly2*nx*q5*sin(q1 + q2)) - q4*(q4*(ny*(ly2*cos(q1 + q2) + L1*cos(q1) + lx2*sin(q1 + q2)) - nx*(ly2*sin(q1 + q2) - lx2*cos(q1 + q2) + L1*sin(q1))) + nx*(ly2*cos(q1 + q2) + L1*cos(q1) + lx2*sin(q1 + q2)) + ny*(ly2*sin(q1 + q2) - lx2*cos(q1 + q2) + L1*sin(q1)) + q5*(lx2*nx*cos(q1 + q2) + ly2*ny*cos(q1 + q2) + lx2*ny*sin(q1 + q2) - ly2*nx*sin(q1 + q2))) - (2*(ly2*nx*cos(q1 + q2) - lx2*ny*cos(q1 + q2) + lx2*nx*sin(q1 + q2) + ly2*ny*sin(q1 + q2))*((Izz3*L1**2*l2**2*m2**2*q5**2*sin(2*q2))/2 - Izz3*L1**2*l2**2*m2**2*q4**2*sin(2*q2) + (Izz1*L2**2*l3**2*m3**2*q4**2*sin(2*q3))/2 + (Izz1*L2**2*l3**2*m3**2*q5**2*sin(2*q3))/2 - Izz2*L1*l3**3*m3**2*q4**2*sin(q2 + q3) + Izz2*L1*l3**3*m3**2*q5**2*sin(q2 + q3) + Izz2*L1*l3**3*m3**2*q6**2*sin(q2 + q3) - Izz3*L1*L2**3*m3**2*q4**2*sin(q2) - Izz3*L1**3*L2*m3**2*q4**2*sin(q2) + Izz3*L1*L2**3*m3**2*q5**2*sin(q2) - (Izz2*L1**2*l3**2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 - (L1**2*L2*l3**3*m3**3*q5**2*sin(2*q2 + 3*q3))/2 - Izz3*L1*l2**3*m2**2*q4**2*sin(q2) - Izz3*L1**3*l2*m2**2*q4**2*sin(q2) + Izz3*L1*l2**3*m2**2*q5**2*sin(q2) + Izz1*L2*l3**3*m3**2*q4**2*sin(q3) + Izz1*L2*l3**3*m3**2*q5**2*sin(q3) - Izz1*L2*l3**3*m3**2*q6**2*sin(q3) + (L1**2*L2**2*l3**2*m3**3*q5**2*sin(2*q2))/2 + (L1**2*L2**2*l3**2*m3**3*q5**2*sin(2*q3))/2 + L1*L2**2*l3**3*m3**3*q5**2*sin(q2 + q3) - (L1**2*L2**2*l3**2*m3**3*q5**2*sin(2*q2 + 2*q3))/2 + L1*L2**3*l3**2*m3**3*q5**2*sin(q2) + L1**2*L2*l3**3*m3**3*q5**2*sin(q3) - (L1*L2**2*l3**3*m3**3*q5**2*sin(q2 - q3))/2 - (L1*L2**3*l3**2*m3**3*q5**2*sin(q2 - 2*q3))/2 - (L1*L2**3*l3**2*m3**3*q5**2*sin(q2 + 2*q3))/2 + (L1**2*L2*l3**3*m3**3*q5**2*sin(2*q2 + q3))/2 - (L1*L2**2*l3**3*m3**3*q5**2*sin(q2 + 3*q3))/2 - Izz3*L1**2*L2**2*m3**2*q4**2*sin(2*q2) + (Izz3*L1**2*L2**2*m3**2*q5**2*sin(2*q2))/2 - L1*l2**2*l3**3*m2*m3**2*q4**2*sin(q2 + q3) + L1*l2**2*l3**3*m2*m3**2*q5**2*sin(q2 + q3) + L1*l2**2*l3**3*m2*m3**2*q6**2*sin(q2 + q3) - (L1**3*L2*l3**2*m2*m3**2*q4**2*sin(q2))/2 + L1**2*L2*l3**3*m2*m3**2*q4**2*sin(q3) + L1**2*L2*l3**3*m2*m3**2*q5**2*sin(q3) - L1**2*L2*l3**3*m2*m3**2*q6**2*sin(q3) - Izz3*L1**2*l2**2*m2**2*q4*q5*sin(2*q2) + Izz1*L2**2*l3**2*m3**2*q4*q5*sin(2*q3) + Izz1*L2**2*l3**2*m3**2*q4*q6*sin(2*q3) + Izz1*L2**2*l3**2*m3**2*q5*q6*sin(2*q3) - (L1**2*l2**2*l3**2*m2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 + 2*Izz2*L1*l3**3*m3**2*q5*q6*sin(q2 + q3) - Izz3*L1**3*L2*m2*m3*q4**2*sin(q2) - L1*l2**3*l3**2*m2**2*m3*q4**2*sin(q2) + L2*l1**2*l3**3*m1*m3**2*q4**2*sin(q3) - (L1**3*l2*l3**2*m2*m3**2*q4**2*sin(q2))/2 - L1**3*l2*l3**2*m2**2*m3*q4**2*sin(q2) + L1*l2**3*l3**2*m2**2*m3*q5**2*sin(q2) + L2*l1**2*l3**3*m1*m3**2*q5**2*sin(q3) - (L1**2*l2*l3**3*m2*m3**2*q4**2*sin(q3))/2 - L2*l1**2*l3**3*m1*m3**2*q6**2*sin(q3) + (L1**2*l2*l3**3*m2*m3**2*q5**2*sin(q3))/2 + (L1**2*l2*l3**3*m2*m3**2*q6**2*sin(q3))/2 - 2*Izz3*L1**3*L2*m3**2*q4*q5*sin(q2) + (L1**3*L2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 - Izz2*L1**2*l3**2*m3**2*q4*q5*sin(2*q2 + 2*q3) - Izz2*L1**2*l3**2*m3**2*q4*q6*sin(2*q2 + 2*q3) - (L1**2*L2*l3**3*m3**3*q4*q5*sin(2*q2 + 3*q3))/2 - (L1**3*L2*l3**2*m3**3*q4*q6*sin(3*q2 + 2*q3))/2 - (L1**2*L2*l3**3*m3**3*q5*q6*sin(2*q2 + 3*q3))/2 - Izz3*L1**3*l2*m2*m3*q4**2*sin(q2) - 2*Izz3*L1**3*l2*m2**2*q4*q5*sin(q2) + 2*Izz1*L2*l3**3*m3**2*q4*q5*sin(q3) - (Izz3*L1*L2**2*l3*m3**2*q4**2*sin(q2 + q3))/2 + (3*Izz3*L1*L2**2*l3*m3**2*q5**2*sin(q2 + q3))/2 + (Izz3*L1*L2**2*l3*m3**2*q6**2*sin(q2 + q3))/2 - (L1**2*l2*l3**3*m2*m3**2*q4**2*sin(2*q2 + q3))/2 - (L1**3*l2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 + (L1**2*l2*l3**3*m2*m3**2*q5**2*sin(2*q2 + q3))/2 + (L1**2*l2*l3**3*m2*m3**2*q6**2*sin(2*q2 + q3))/2 + (L1**2*L2**2*l3**2*m3**3*q4*q5*sin(2*q2))/2 + (L1**2*L2**2*l3**2*m3**3*q4*q5*sin(2*q3))/2 + L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q2) + L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q3) + (L1**2*L2**2*l3**2*m3**3*q5*q6*sin(2*q2))/2 + (L1**2*L2**2*l3**2*m3**3*q5*q6*sin(2*q3))/2 + L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 + q3) + L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 + q3) - (Izz1*L1*L2*l3**2*m3**2*q4**2*sin(q2))/2 - (Izz2*L1*L2*l3**2*m3**2*q4**2*sin(q2))/2 + (3*Izz2*L1*L2*l3**2*m3**2*q5**2*sin(q2))/2 + (Izz3*L1**2*L2*l3*m3**2*q4**2*sin(q3))/2 + (3*Izz3*L1**2*L2*l3*m3**2*q5**2*sin(q3))/2 - (Izz3*L1**2*L2*l3*m3**2*q6**2*sin(q3))/2 - Izz2*Izz3*L1*l3*m3*q4**2*sin(q2 + q3) + Izz2*Izz3*L1*l3*m3*q5**2*sin(q2 + q3) + Izz2*Izz3*L1*l3*m3*q6**2*sin(q2 + q3) - (L1**2*L2**2*l3**2*m3**3*q4*q5*sin(2*q2 + 2*q3))/2 - L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q2 + 2*q3) - (L1**2*L2**2*l3**2*m3**3*q5*q6*sin(2*q2 + 2*q3))/2 - Izz1*Izz3*L1*L2*m3*q4**2*sin(q2) - Izz2*Izz3*L1*L2*m3*q4**2*sin(q2) + Izz2*Izz3*L1*L2*m3*q5**2*sin(q2) + L1*L2**3*l3**2*m3**3*q4*q5*sin(q2) + L1*L2**3*l3**2*m3**3*q4*q6*sin(q2) + L1**2*L2*l3**3*m3**3*q4*q5*sin(q3) + L1**3*L2*l3**2*m3**3*q4*q6*sin(q2) + L1*L2**3*l3**2*m3**3*q5*q6*sin(q2) + L1**2*L2*l3**3*m3**3*q5*q6*sin(q3) + (Izz1*L1*L2*l3**2*m3**2*q4**2*sin(q2 + 2*q3))/2 - (Izz2*L1*L2*l3**2*m3**2*q4**2*sin(q2 + 2*q3))/2 - (Izz3*L1*L2**2*l3*m3**2*q4**2*sin(q2 - q3))/2 - (Izz2*L1*L2*l3**2*m3**2*q5**2*sin(q2 + 2*q3))/2 - (Izz3*L1*L2**2*l3*m3**2*q5**2*sin(q2 - q3))/2 - (Izz3*L1**2*L2*l3*m3**2*q4**2*sin(2*q2 + q3))/2 + (Izz3*L1*L2**2*l3*m3**2*q6**2*sin(q2 - q3))/2 + (Izz3*L1**2*L2*l3*m3**2*q5**2*sin(2*q2 + q3))/2 + (Izz3*L1**2*L2*l3*m3**2*q6**2*sin(2*q2 + q3))/2 - Izz1*Izz3*L1*l2*m2*q4**2*sin(q2) - Izz2*Izz3*L1*l2*m2*q4**2*sin(q2) + Izz2*Izz3*L1*l2*m2*q5**2*sin(q2) + Izz1*Izz3*L2*l3*m3*q4**2*sin(q3) + Izz1*Izz3*L2*l3*m3*q5**2*sin(q3) - Izz1*Izz3*L2*l3*m3*q6**2*sin(q3) + (L1**2*L2**2*l3**2*m2*m3**2*q4**2*sin(2*q3))/2 + (L1**2*L2**2*l3**2*m2*m3**2*q5**2*sin(2*q3))/2 - (L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 - q3))/2 - (L1*L2**3*l3**2*m3**3*q4*q5*sin(q2 - 2*q3))/2 - (L1*L2**3*l3**2*m3**3*q4*q5*sin(q2 + 2*q3))/2 + (L1**2*L2*l3**3*m3**3*q4*q5*sin(2*q2 + q3))/2 - (L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 + 3*q3))/2 - (L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 - q3))/2 - (L1*L2**3*l3**2*m3**3*q4*q6*sin(q2 - 2*q3))/2 - (L1*L2**3*l3**2*m3**3*q4*q6*sin(q2 + 2*q3))/2 + (L1**3*L2*l3**2*m3**3*q4*q6*sin(q2 + 2*q3))/2 - (L1*L2**3*l3**2*m3**3*q5*q6*sin(q2 - 2*q3))/2 - (L1*L2**3*l3**2*m3**3*q5*q6*sin(q2 + 2*q3))/2 + (L1**2*L2*l3**3*m3**3*q5*q6*sin(2*q2 + q3))/2 - (L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 + 3*q3))/2 - L1**2*l2**2*l3**2*m2**2*m3*q4**2*sin(2*q2) + (L2**2*l1**2*l3**2*m1*m3**2*q4**2*sin(2*q3))/2 + (L1**2*l2**2*l3**2*m2**2*m3*q5**2*sin(2*q2))/2 + (L2**2*l1**2*l3**2*m1*m3**2*q5**2*sin(2*q3))/2 - Izz3*L1**2*L2**2*m3**2*q4*q5*sin(2*q2) - L1**2*l2**2*l3**2*m2**2*m3*q4*q5*sin(2*q2) + L2**2*l1**2*l3**2*m1*m3**2*q4*q5*sin(2*q3) + L2**2*l1**2*l3**2*m1*m3**2*q4*q6*sin(2*q3) + L2**2*l1**2*l3**2*m1*m3**2*q5*q6*sin(2*q3) + (L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q5**2*sin(2*q2 + 2*q3))/2 + 2*L1*l2**2*l3**3*m2*m3**2*q5*q6*sin(q2 + q3) - L1**3*L2*l3**2*m2*m3**2*q4*q5*sin(q2) + 2*L1**2*L2*l3**3*m2*m3**2*q4*q5*sin(q3) + L1**3*L2*l3**2*m2*m3**2*q4*q6*sin(q2) - L1**2*l2**2*l3**2*m2*m3**2*q4*q5*sin(2*q2 + 2*q3) - L1**2*l2**2*l3**2*m2*m3**2*q4*q6*sin(2*q2 + 2*q3) - 2*Izz3*L1**3*L2*m2*m3*q4*q5*sin(q2) + 2*L2*l1**2*l3**3*m1*m3**2*q4*q5*sin(q3) - L1**3*l2*l3**2*m2*m3**2*q4*q5*sin(q2) - 2*L1**3*l2*l3**2*m2**2*m3*q4*q5*sin(q2) + L1**2*l2*l3**3*m2*m3**2*q5*q6*sin(q3) - (L1*L2*l2*l3**3*m2*m3**2*q4**2*sin(q2 - q3))/2 - (L1*L2*l2*l3**3*m2*m3**2*q5**2*sin(q2 - q3))/2 + (L1*L2*l2*l3**3*m2*m3**2*q6**2*sin(q2 - q3))/2 + L1**3*L2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3) + L1**3*L2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3) - 2*Izz3*L1**3*l2*m2*m3*q4*q5*sin(q2) + Izz3*L1*L2**2*l3*m3**2*q4*q5*sin(q2 + q3) + 2*Izz3*L1*L2**2*l3*m3**2*q5*q6*sin(q2 + q3) - L1**3*l2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3) - (L1**3*l2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3))/2 + L1**2*l2*l3**3*m2*m3**2*q5*q6*sin(2*q2 + q3) - (L1*L2*l1**2*l3**2*m1*m3**2*q4**2*sin(q2))/2 - (L1*L2*l2**2*l3**2*m2*m3**2*q4**2*sin(q2))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q4**2*sin(q2))/2 + (3*L1*L2*l2**2*l3**2*m2*m3**2*q5**2*sin(q2))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q5**2*sin(q2))/2 - Izz3*L1*l2**2*l3*m2*m3*q4**2*sin(q2 + q3) + Izz3*L1*l2**2*l3*m2*m3*q5**2*sin(q2 + q3) + Izz3*L1*l2**2*l3*m2*m3*q6**2*sin(q2 + q3) - Izz3*L1*L2*l1**2*m1*m3*q4**2*sin(q2) - Izz3*L1*L2*l2**2*m2*m3*q4**2*sin(q2) - Izz3*L1*L2**2*l2*m2*m3*q4**2*sin(q2) + Izz3*L1*L2*l2**2*m2*m3*q5**2*sin(q2) + Izz3*L1*L2**2*l2*m2*m3*q5**2*sin(q2) + Izz3*L1**2*L2*l3*m2*m3*q4**2*sin(q3) + Izz3*L1**2*L2*l3*m2*m3*q5**2*sin(q3) - Izz3*L1**2*L2*l3*m2*m3*q6**2*sin(q3) - Izz1*L1*L2*l3**2*m3**2*q4*q5*sin(q2) + Izz1*L1*L2*l3**2*m3**2*q4*q6*sin(q2) + Izz2*L1*L2*l3**2*m3**2*q4*q5*sin(q2) + Izz2*L1*L2*l3**2*m3**2*q4*q6*sin(q2) + Izz2*L1*L2*l3**2*m3**2*q5*q6*sin(q2) + 2*Izz3*L1**2*L2*l3*m3**2*q4*q5*sin(q3) + Izz3*L1**2*L2*l3*m3**2*q5*q6*sin(q3) + (L1*L2*l1**2*l3**2*m1*m3**2*q4**2*sin(q2 + 2*q3))/2 - (L1*L2*l2**2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 - (L1*L2*l2**2*l3**2*m2*m3**2*q5**2*sin(q2 + 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q5**2*sin(q2 - 2*q3))/2 + 2*Izz2*Izz3*L1*l3*m3*q5*q6*sin(q2 + q3) - Izz3*L1*l1**2*l2*m1*m2*q4**2*sin(q2) - Izz1*L1*l2*l3**2*m2*m3*q4**2*sin(q2) - Izz2*L1*l2*l3**2*m2*m3*q4**2*sin(q2) + Izz2*L1*l2*l3**2*m2*m3*q5**2*sin(q2) + Izz3*L2*l1**2*l3*m1*m3*q4**2*sin(q3) + Izz3*L2*l1**2*l3*m1*m3*q5**2*sin(q3) - (Izz3*L1**2*l2*l3*m2*m3*q4**2*sin(q3))/2 - Izz3*L2*l1**2*l3*m1*m3*q6**2*sin(q3) + (Izz3*L1**2*l2*l3*m2*m3*q5**2*sin(q3))/2 + (Izz3*L1**2*l2*l3*m2*m3*q6**2*sin(q3))/2 - 2*Izz1*Izz3*L1*L2*m3*q4*q5*sin(q2) + Izz1*L1*L2*l3**2*m3**2*q4*q5*sin(q2 + 2*q3) + Izz1*L1*L2*l3**2*m3**2*q4*q6*sin(q2 + 2*q3) - Izz2*L1*L2*l3**2*m3**2*q4*q5*sin(q2 + 2*q3) - Izz3*L1*L2**2*l3*m3**2*q4*q5*sin(q2 - q3) - Izz2*L1*L2*l3**2*m3**2*q4*q6*sin(q2 + 2*q3) - Izz2*L1*L2*l3**2*m3**2*q5*q6*sin(q2 + 2*q3) + Izz3*L1**2*L2*l3*m3**2*q5*q6*sin(2*q2 + q3) - (L1**3*l2*l3**2*m2*m3**2*q4*q6*sin(3*q2 + 2*q3))/2 - L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q2) - (L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q3))/2 + L1**2*L2*l2*l3**2*m2*m3**2*q5**2*sin(2*q2) - 2*Izz1*Izz3*L1*l2*m2*q4*q5*sin(q2) + 2*Izz1*Izz3*L2*l3*m3*q4*q5*sin(q3) + L1**2*L2**2*l3**2*m2*m3**2*q4*q5*sin(2*q3) + L1**2*L2**2*l3**2*m2*m3**2*q4*q6*sin(2*q3) + L1**2*L2**2*l3**2*m2*m3**2*q5*q6*sin(2*q3) - (Izz3*L1**2*l2*l3*m2*m3*q4**2*sin(2*q2 + q3))/2 + (Izz3*L1**2*l2*l3*m2*m3*q5**2*sin(2*q2 + q3))/2 + (Izz3*L1**2*l2*l3*m2*m3*q6**2*sin(2*q2 + q3))/2 + (L1*L2*l2*l3**3*m2*m3**2*q4**2*sin(q2 + q3))/2 + (L1*L2*l2*l3**3*m2*m3**2*q5**2*sin(q2 + q3))/2 - (L1*L2*l2*l3**3*m2*m3**2*q6**2*sin(q2 + q3))/2 - 2*Izz3*L1**2*L2*l2*m2*m3*q4**2*sin(2*q2) + Izz3*L1**2*L2*l2*m2*m3*q5**2*sin(2*q2) - 2*Izz3*L1**2*L2*l2*m2*m3*q4*q5*sin(2*q2) + (L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q2 + 2*q3))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q5*q6*sin(2*q2 + 2*q3))/2 - L1*L2*l2*l3**3*m2*m3**2*q4*q5*sin(q2 - q3) + (Izz3*L1*L2*l2*l3*m2*m3*q4**2*sin(q2 + q3))/2 + (Izz3*L1*L2*l2*l3*m2*m3*q5**2*sin(q2 + q3))/2 - (Izz3*L1*L2*l2*l3*m2*m3*q6**2*sin(q2 + q3))/2 - L1*L2*l1**2*l3**2*m1*m3**2*q4*q5*sin(q2) + L1*L2*l1**2*l3**2*m1*m3**2*q4*q6*sin(q2) + L1*L2*l2**2*l3**2*m2*m3**2*q4*q5*sin(q2) + L1*L2*l2**2*l3**2*m2*m3**2*q4*q6*sin(q2) + L1*L2*l2**2*l3**2*m2*m3**2*q5*q6*sin(q2) + 2*Izz3*L1*l2**2*l3*m2*m3*q5*q6*sin(q2 + q3) - L1*l1**2*l2*l3**2*m1*m2*m3*q4**2*sin(q2) - 2*Izz3*L1*L2*l1**2*m1*m3*q4*q5*sin(q2) + 2*Izz3*L1**2*L2*l3*m2*m3*q4*q5*sin(q3) + L1*L2*l1**2*l3**2*m1*m3**2*q4*q5*sin(q2 + 2*q3) + L1*L2*l1**2*l3**2*m1*m3**2*q4*q6*sin(q2 + 2*q3) - L1*L2*l2**2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3) - (L1*L2**2*l2*l3**2*m2*m3**2*q4*q5*sin(q2 - 2*q3))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3))/2 - L1*L2*l2**2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3) - (L1*L2**2*l2*l3**2*m2*m3**2*q4*q6*sin(q2 - 2*q3))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3))/2 - L1*L2*l2**2*l3**2*m2*m3**2*q5*q6*sin(q2 + 2*q3) - (L1*L2**2*l2*l3**2*m2*m3**2*q5*q6*sin(q2 - 2*q3))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q5*q6*sin(q2 + 2*q3))/2 - 2*Izz3*L1*l1**2*l2*m1*m2*q4*q5*sin(q2) - 2*Izz1*L1*l2*l3**2*m2*m3*q4*q5*sin(q2) + 2*Izz3*L2*l1**2*l3*m1*m3*q4*q5*sin(q3) + Izz3*L1**2*l2*l3*m2*m3*q5*q6*sin(q3) - (Izz3*L1*L2*l2*l3*m2*m3*q4**2*sin(q2 - q3))/2 - (Izz3*L1*L2*l2*l3*m2*m3*q5**2*sin(q2 - q3))/2 + (Izz3*L1*L2*l2*l3*m2*m3*q6**2*sin(q2 - q3))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q2))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q3))/2 + L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q2) + (L1**2*L2*l2*l3**2*m2*m3**2*q5*q6*sin(2*q2))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q5*q6*sin(2*q3))/2 + Izz3*L1**2*l2*l3*m2*m3*q5*q6*sin(2*q2 + q3) + L1*L2*l2*l3**3*m2*m3**2*q4*q5*sin(q2 + q3) + Izz3*L1*L2*l2*l3*m2*m3*q4*q5*sin(q2 + q3) - 2*L1*l1**2*l2*l3**2*m1*m2*m3*q4*q5*sin(q2) - Izz3*L1*L2*l2*l3*m2*m3*q4*q5*sin(q2 - q3)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3)) - (2*(nx*(ly2*cos(q1 + q2) + L1*cos(q1) + lx2*sin(q1 + q2)) + ny*(ly2*sin(q1 + q2) - lx2*cos(q1 + q2) + L1*sin(q1)))*((Izz3*L1**2*l2**2*m2**2*q4**2*sin(2*q2))/2 + Izz2*L1*l3**3*m3**2*q4**2*sin(q2 + q3) - Izz2*L1*l3**3*m3**2*q5**2*sin(q2 + q3) - Izz2*L1*l3**3*m3**2*q6**2*sin(q2 + q3) + Izz3*L1*L2**3*m3**2*q4**2*sin(q2) - Izz3*L1*L2**3*m3**2*q5**2*sin(q2) + (Izz2*L1**2*l3**2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 + Izz3*L1*l2**3*m2**2*q4**2*sin(q2) - Izz3*L1*l2**3*m2**2*q5**2*sin(q2) - L1*L2**2*l3**3*m3**3*q5**2*sin(q2 + q3) - L1*L2**3*l3**2*m3**3*q5**2*sin(q2) + (L1*L2**2*l3**3*m3**3*q5**2*sin(q2 - q3))/2 + (L1*L2**3*l3**2*m3**3*q5**2*sin(q2 - 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q5**2*sin(q2 + 2*q3))/2 + (L1*L2**2*l3**3*m3**3*q5**2*sin(q2 + 3*q3))/2 + (Izz3*L1**2*L2**2*m3**2*q4**2*sin(2*q2))/2 + L1*l2**2*l3**3*m2*m3**2*q4**2*sin(q2 + q3) - L1*l2**2*l3**3*m2*m3**2*q5**2*sin(q2 + q3) - L1*l2**2*l3**3*m2*m3**2*q6**2*sin(q2 + q3) + Izz3*L1**2*l2**2*m2**2*q4*q5*sin(2*q2) + (L1**2*l2**2*l3**2*m2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 - 2*Izz2*L1*l3**3*m3**2*q5*q6*sin(q2 + q3) + L1*l2**3*l3**2*m2**2*m3*q4**2*sin(q2) - L1*l2**3*l3**2*m2**2*m3*q5**2*sin(q2) + Izz2*L1**2*l3**2*m3**2*q4*q5*sin(2*q2 + 2*q3) + Izz2*L1**2*l3**2*m3**2*q4*q6*sin(2*q2 + 2*q3) + (Izz3*L1*L2**2*l3*m3**2*q4**2*sin(q2 + q3))/2 - (3*Izz3*L1*L2**2*l3*m3**2*q5**2*sin(q2 + q3))/2 - (Izz3*L1*L2**2*l3*m3**2*q6**2*sin(q2 + q3))/2 - (L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q2))/2 - (L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q3))/2 - L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 + q3) - L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 + q3) + (Izz2*L1*L2*l3**2*m3**2*q4**2*sin(q2))/2 - (3*Izz2*L1*L2*l3**2*m3**2*q5**2*sin(q2))/2 + Izz2*Izz3*L1*l3*m3*q4**2*sin(q2 + q3) - Izz2*Izz3*L1*l3*m3*q5**2*sin(q2 + q3) - Izz2*Izz3*L1*l3*m3*q6**2*sin(q2 + q3) + (L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q2 + 2*q3))/2 + Izz2*Izz3*L1*L2*m3*q4**2*sin(q2) - Izz2*Izz3*L1*L2*m3*q5**2*sin(q2) - L1*L2**3*l3**2*m3**3*q4*q5*sin(q2) - L1*L2**3*l3**2*m3**3*q4*q6*sin(q2) - L1*L2**3*l3**2*m3**3*q5*q6*sin(q2) + (Izz2*L1*L2*l3**2*m3**2*q4**2*sin(q2 + 2*q3))/2 + (Izz3*L1*L2**2*l3*m3**2*q4**2*sin(q2 - q3))/2 + (Izz2*L1*L2*l3**2*m3**2*q5**2*sin(q2 + 2*q3))/2 + (Izz3*L1*L2**2*l3*m3**2*q5**2*sin(q2 - q3))/2 - (Izz3*L1*L2**2*l3*m3**2*q6**2*sin(q2 - q3))/2 + Izz2*Izz3*L1*l2*m2*q4**2*sin(q2) - Izz2*Izz3*L1*l2*m2*q5**2*sin(q2) + (L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 - q3))/2 + (L1*L2**3*l3**2*m3**3*q4*q5*sin(q2 - 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q4*q5*sin(q2 + 2*q3))/2 + (L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 + 3*q3))/2 + (L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 - q3))/2 + (L1*L2**3*l3**2*m3**3*q4*q6*sin(q2 - 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q4*q6*sin(q2 + 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q5*q6*sin(q2 - 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q5*q6*sin(q2 + 2*q3))/2 + (L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 + 3*q3))/2 + (L1**2*l2**2*l3**2*m2**2*m3*q4**2*sin(2*q2))/2 + Izz3*L1**2*L2**2*m3**2*q4*q5*sin(2*q2) + L1**2*l2**2*l3**2*m2**2*m3*q4*q5*sin(2*q2) - (L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 - 2*L1*l2**2*l3**3*m2*m3**2*q5*q6*sin(q2 + q3) + L1**2*l2**2*l3**2*m2*m3**2*q4*q5*sin(2*q2 + 2*q3) + L1**2*l2**2*l3**2*m2*m3**2*q4*q6*sin(2*q2 + 2*q3) + (L1*L2*l2*l3**3*m2*m3**2*q4**2*sin(q2 - q3))/2 + (L1*L2*l2*l3**3*m2*m3**2*q5**2*sin(q2 - q3))/2 - (L1*L2*l2*l3**3*m2*m3**2*q6**2*sin(q2 - q3))/2 - Izz3*L1*L2**2*l3*m3**2*q4*q5*sin(q2 + q3) - 2*Izz3*L1*L2**2*l3*m3**2*q5*q6*sin(q2 + q3) + (L1*L2*l2**2*l3**2*m2*m3**2*q4**2*sin(q2))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q4**2*sin(q2))/2 - (3*L1*L2*l2**2*l3**2*m2*m3**2*q5**2*sin(q2))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q5**2*sin(q2))/2 + Izz3*L1*l2**2*l3*m2*m3*q4**2*sin(q2 + q3) - Izz3*L1*l2**2*l3*m2*m3*q5**2*sin(q2 + q3) - Izz3*L1*l2**2*l3*m2*m3*q6**2*sin(q2 + q3) + Izz3*L1*L2*l2**2*m2*m3*q4**2*sin(q2) + Izz3*L1*L2**2*l2*m2*m3*q4**2*sin(q2) - Izz3*L1*L2*l2**2*m2*m3*q5**2*sin(q2) - Izz3*L1*L2**2*l2*m2*m3*q5**2*sin(q2) - Izz2*L1*L2*l3**2*m3**2*q4*q5*sin(q2) - Izz2*L1*L2*l3**2*m3**2*q4*q6*sin(q2) - Izz2*L1*L2*l3**2*m3**2*q5*q6*sin(q2) + (L1*L2*l2**2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 + (L1*L2*l2**2*l3**2*m2*m3**2*q5**2*sin(q2 + 2*q3))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q5**2*sin(q2 - 2*q3))/2 - 2*Izz2*Izz3*L1*l3*m3*q5*q6*sin(q2 + q3) + Izz2*L1*l2*l3**2*m2*m3*q4**2*sin(q2) - Izz2*L1*l2*l3**2*m2*m3*q5**2*sin(q2) + Izz2*L1*L2*l3**2*m3**2*q4*q5*sin(q2 + 2*q3) + Izz3*L1*L2**2*l3*m3**2*q4*q5*sin(q2 - q3) + Izz2*L1*L2*l3**2*m3**2*q4*q6*sin(q2 + 2*q3) + Izz2*L1*L2*l3**2*m3**2*q5*q6*sin(q2 + 2*q3) + (L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q2))/2 - (L1*L2*l2*l3**3*m2*m3**2*q4**2*sin(q2 + q3))/2 - (L1*L2*l2*l3**3*m2*m3**2*q5**2*sin(q2 + q3))/2 + (L1*L2*l2*l3**3*m2*m3**2*q6**2*sin(q2 + q3))/2 + Izz3*L1**2*L2*l2*m2*m3*q4**2*sin(2*q2) + 2*Izz3*L1**2*L2*l2*m2*m3*q4*q5*sin(2*q2) - L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q2 + 2*q3) - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q2 + 2*q3))/2 + L1*L2*l2*l3**3*m2*m3**2*q4*q5*sin(q2 - q3) - (Izz3*L1*L2*l2*l3*m2*m3*q4**2*sin(q2 + q3))/2 - (Izz3*L1*L2*l2*l3*m2*m3*q5**2*sin(q2 + q3))/2 + (Izz3*L1*L2*l2*l3*m2*m3*q6**2*sin(q2 + q3))/2 - L1*L2*l2**2*l3**2*m2*m3**2*q4*q5*sin(q2) - L1*L2*l2**2*l3**2*m2*m3**2*q4*q6*sin(q2) - L1*L2*l2**2*l3**2*m2*m3**2*q5*q6*sin(q2) - 2*Izz3*L1*l2**2*l3*m2*m3*q5*q6*sin(q2 + q3) + L1*L2*l2**2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3) + (L1*L2**2*l2*l3**2*m2*m3**2*q4*q5*sin(q2 - 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3))/2 + L1*L2*l2**2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3) + (L1*L2**2*l2*l3**2*m2*m3**2*q4*q6*sin(q2 - 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3))/2 + L1*L2*l2**2*l3**2*m2*m3**2*q5*q6*sin(q2 + 2*q3) + (L1*L2**2*l2*l3**2*m2*m3**2*q5*q6*sin(q2 - 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q5*q6*sin(q2 + 2*q3))/2 + (Izz3*L1*L2*l2*l3*m2*m3*q4**2*sin(q2 - q3))/2 + (Izz3*L1*L2*l2*l3*m2*m3*q5**2*sin(q2 - q3))/2 - (Izz3*L1*L2*l2*l3*m2*m3*q6**2*sin(q2 - q3))/2 + L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q2) - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q2))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q3))/2 - L1*L2*l2*l3**3*m2*m3**2*q4*q5*sin(q2 + q3) - Izz3*L1*L2*l2*l3*m2*m3*q4*q5*sin(q2 + q3) + Izz3*L1*L2*l2*l3*m2*m3*q4*q5*sin(q2 - q3)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3))
    return LfB_medial

def LgB_medial(q, L, l, m, Ixx, Iyy, Izz, z, lx, ly, nx, ny, pcx, pcy):
    q1 = q[0]

    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q4 = q[3]
    q5 = q[4]
    q6 = q[5]

    m1 = m[0]
    m2 = m[1]
    m3 = m[2]

    l1 = l[0]
    l2 = l[1]
    l3 = l[2]

    L1 = L[0]
    L2 = L[1]
    L3 = L[2]

    Ixx1 = Ixx[0]
    Ixx2 = Ixx[1]
    Ixx3 = Ixx[2]

    Iyy1 = Iyy[0]
    Iyy2 = Iyy[1]
    Iyy3 = Iyy[2]

    Izz1 = Izz[0]
    Izz2 = Izz[1]
    Izz3 = Izz[2]

    lx1 = lx[0]
    ly1 = ly[0]
    lx2 = lx[1]
    ly2 = ly[1]
    lx3 = lx[2]
    ly3 = ly[2]

    LgB_medial = [(L1*(L2**2*l3**2*m3**2*nx*cos(q1 - 2*q3) - 4*Izz2*Izz3*ny*sin(q1) - 4*Izz3*L2**2*m3*nx*cos(q1) - 4*Izz3*L2**2*m3*ny*sin(q1) - 4*Izz2*Izz3*nx*cos(q1) + L2**2*l3**2*m3**2*nx*cos(q1 + 2*q3) - 4*Izz3*l2**2*m2*nx*cos(q1) - 4*Izz2*l3**2*m3*nx*cos(q1) + L2**2*l3**2*m3**2*ny*sin(q1 - 2*q3) + L2**2*l3**2*m3**2*ny*sin(q1 + 2*q3) - 4*Izz3*l2**2*m2*ny*sin(q1) - 4*Izz2*l3**2*m3*ny*sin(q1) - 2*L2**2*l3**2*m3**2*nx*cos(q1) - 2*L2**2*l3**2*m3**2*ny*sin(q1) + L2*l3**2*lx2*m3**2*nx*sin(q1) + L2*l3**2*ly2*m3**2*ny*sin(q1) - L2*l3**2*lx2*m3**2*nx*sin(q1 + 2*q2 + 2*q3) - L2*l3**2*ly2*m3**2*ny*sin(q1 + 2*q2 + 2*q3) - 2*Izz3*L2*lx2*m3*ny*cos(q1) + 2*Izz3*L2*ly2*m3*nx*cos(q1) - 4*l2**2*l3**2*m2*m3*nx*cos(q1) + 2*Izz3*L2*lx2*m3*nx*sin(q1) + 2*Izz3*L2*ly2*m3*ny*sin(q1) - L2*l3**2*lx2*m3**2*ny*cos(q1 + 2*q2) + L2*l3**2*ly2*m3**2*nx*cos(q1 + 2*q2) + L2*l3**2*lx2*m3**2*ny*cos(q1 - 2*q3) - L2*l3**2*ly2*m3**2*nx*cos(q1 - 2*q3) - 4*l2**2*l3**2*m2*m3*ny*sin(q1) - 2*Izz3*l2*lx2*m2*ny*cos(q1) + 2*Izz3*l2*ly2*m2*nx*cos(q1) + L2*l3**2*lx2*m3**2*nx*sin(q1 + 2*q2) - L2*l3**2*lx2*m3**2*nx*sin(q1 - 2*q3) + L2*l3**2*ly2*m3**2*ny*sin(q1 + 2*q2) - L2*l3**2*ly2*m3**2*ny*sin(q1 - 2*q3) - 2*Izz3*L2*lx2*m3*ny*cos(q1 + 2*q2) + 2*Izz3*L2*ly2*m3*nx*cos(q1 + 2*q2) + 2*Izz3*l2*lx2*m2*nx*sin(q1) + 2*Izz3*l2*ly2*m2*ny*sin(q1) + 2*Izz3*L2*lx2*m3*nx*sin(q1 + 2*q2) + 2*Izz3*L2*ly2*m3*ny*sin(q1 + 2*q2) - 2*Izz3*l2*lx2*m2*ny*cos(q1 + 2*q2) + 2*Izz3*l2*ly2*m2*nx*cos(q1 + 2*q2) + 2*Izz3*l2*lx2*m2*nx*sin(q1 + 2*q2) + 2*Izz3*l2*ly2*m2*ny*sin(q1 + 2*q2) - L2*l3**2*lx2*m3**2*ny*cos(q1) + L2*l3**2*ly2*m3**2*nx*cos(q1) + L2*l3**2*lx2*m3**2*ny*cos(q1 + 2*q2 + 2*q3) - L2*l3**2*ly2*m3**2*nx*cos(q1 + 2*q2 + 2*q3) - 2*l2*l3**2*lx2*m2*m3*ny*cos(q1) + 2*l2*l3**2*ly2*m2*m3*nx*cos(q1) + 2*l2*l3**2*lx2*m2*m3*nx*sin(q1) + 2*l2*l3**2*ly2*m2*m3*ny*sin(q1) - 2*l2*l3**2*lx2*m2*m3*ny*cos(q1 + 2*q2) + 2*l2*l3**2*ly2*m2*m3*nx*cos(q1 + 2*q2) + 2*l2*l3**2*lx2*m2*m3*nx*sin(q1 + 2*q2) + 2*l2*l3**2*ly2*m2*m3*ny*sin(q1 + 2*q2)))/(2*(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3))), (2*(nx*(ly2*cos(q1 + q2) + L1*cos(q1) + lx2*sin(q1 + q2)) + ny*(ly2*sin(q1 + q2) - lx2*cos(q1 + q2) + L1*sin(q1)))*(Izz2*Izz3 + (L2**2*l3**2*m3**2)/2 + Izz3*L2**2*m3 + Izz3*l2**2*m2 + Izz2*l3**2*m3 + l2**2*l3**2*m2*m3 - (L2**2*l3**2*m3**2*cos(2*q3))/2 + (L1*L2*l3**2*m3**2*cos(q2))/2 + Izz3*L1*L2*m3*cos(q2) - (L1*L2*l3**2*m3**2*cos(q2 + 2*q3))/2 + Izz3*L1*l2*m2*cos(q2) + L1*l2*l3**2*m2*m3*cos(q2)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3)) - (2*(ly2*nx*cos(q1 + q2) - lx2*ny*cos(q1 + q2) + lx2*nx*sin(q1 + q2) + ly2*ny*sin(q1 + q2))*(Izz1*Izz3 + Izz2*Izz3 + L1**2*l3**2*m3**2 + L2**2*l3**2*m3**2 + Izz3*L1**2*m2 + Izz3*L1**2*m3 + Izz3*L2**2*m3 + Izz3*l1**2*m1 + Izz1*l3**2*m3 + Izz3*l2**2*m2 + Izz2*l3**2*m3 - L1**2*l3**2*m3**2*cos(q2 + q3)**2 + L1**2*l3**2*m2*m3 + l1**2*l3**2*m1*m3 + l2**2*l3**2*m2*m3 - L2**2*l3**2*m3**2*cos(q3)**2 + 2*L1*L2*l3**2*m3**2*cos(q2) + 2*Izz3*L1*L2*m3*cos(q2) + 2*Izz3*L1*l2*m2*cos(q2) - 2*L1*L2*l3**2*m3**2*cos(q2 + q3)*cos(q3) + 2*L1*l2*l3**2*m2*m3*cos(q2)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3)), (2*(ly2*nx*cos(q1 + q2) - lx2*ny*cos(q1 + q2) + lx2*nx*sin(q1 + q2) + ly2*ny*sin(q1 + q2))*(Izz1*Izz3 + L1**2*l3**2*m3**2 + Izz3*L1**2*m2 + Izz3*L1**2*m3 + Izz3*l1**2*m1 + Izz1*l3**2*m3 - L1**2*l3**2*m3**2*cos(q2 + q3)**2 + L1**2*l3**2*m2*m3 + l1**2*l3**2*m1*m3 - L1*L2**2*l3*m3**2*cos(q2 + q3) + L1*L2*l3**2*m3**2*cos(q2) + L1**2*L2*l3*m3**2*cos(q3) - Izz2*L1*l3*m3*cos(q2 + q3) + Izz3*L1*L2*m3*cos(q2) + Izz3*L1*l2*m2*cos(q2) + Izz1*L2*l3*m3*cos(q3) - L1**2*L2*l3*m3**2*cos(q2 + q3)*cos(q2) - L1*L2*l3**2*m3**2*cos(q2 + q3)*cos(q3) + L1*L2**2*l3*m3**2*cos(q2)*cos(q3) - L1*l2**2*l3*m2*m3*cos(q2 + q3) + L1**2*L2*l3*m2*m3*cos(q3) + L1*l2*l3**2*m2*m3*cos(q2) + L2*l1**2*l3*m1*m3*cos(q3) - L1**2*l2*l3*m2*m3*cos(q2 + q3)*cos(q2) + L1*L2*l2*l3*m2*m3*cos(q2)*cos(q3)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3)) - (2*L1*(nx*(ly2*cos(q1 + q2) + L1*cos(q1) + lx2*sin(q1 + q2)) + ny*(ly2*sin(q1 + q2) - lx2*cos(q1 + q2) + L1*sin(q1)))*(L2*l3**2*m3**2*cos(q2) - Izz2*l3*m3*cos(q2 + q3) + Izz3*L2*m3*cos(q2) + Izz3*l2*m2*cos(q2) - L2**2*l3*m3**2*cos(q2 + q3) - l2**2*l3*m2*m3*cos(q2 + q3) + l2*l3**2*m2*m3*cos(q2) - L2*l3**2*m3**2*cos(q2 + q3)*cos(q3) + L2**2*l3*m3**2*cos(q2)*cos(q3) + L2*l2*l3*m2*m3*cos(q2)*cos(q3)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3))]
    return LgB_medial

def B_medial(q, L, l, m, Ixx, Iyy, Izz, z, lx, ly, nx, ny, pcx, pcy):
    q1 = q[0]

    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q4 = q[3]
    q5 = q[4]
    q6 = q[5]

    m1 = m[0]
    m2 = m[1]
    m3 = m[2]

    l1 = l[0]
    l2 = l[1]
    l3 = l[2]

    L1 = L[0]
    L2 = L[1]
    L3 = L[2]

    Ixx1 = Ixx[0]
    Ixx2 = Ixx[1]
    Ixx3 = Ixx[2]

    Iyy1 = Iyy[0]
    Iyy2 = Iyy[1]
    Iyy3 = Iyy[2]

    Izz1 = Izz[0]
    Izz2 = Izz[1]
    Izz3 = Izz[2]

    lx1 = lx[0]
    ly1 = ly[0]
    lx2 = lx[1]
    ly2 = ly[1]
    lx3 = lx[2]
    ly3 = ly[2]

    B_medial = ny*(ly2*cos(q1 + q2) - pcy + L1*cos(q1) + lx2*sin(q1 + q2)) - q5*(nx*(ly2*cos(q1 + q2) + lx2*sin(q1 + q2)) - ny*(lx2*cos(q1 + q2) - ly2*sin(q1 + q2))) - nx*(pcx - lx2*cos(q1 + q2) + ly2*sin(q1 + q2) + L1*sin(q1)) - q4*(nx*(ly2*cos(q1 + q2) + L1*cos(q1) + lx2*sin(q1 + q2)) + ny*(ly2*sin(q1 + q2) - lx2*cos(q1 + q2) + L1*sin(q1)))
    return B_medial

def LfB_distal(q, L, l, m, Ixx, Iyy, Izz, z, lx, ly, nx, ny, pcx, pcy):
    q1 = q[0]

    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q4 = q[3]
    q5 = q[4]
    q6 = q[5]

    m1 = m[0]
    m2 = m[1]
    m3 = m[2]

    l1 = l[0]
    l2 = l[1]
    l3 = l[2]

    L1 = L[0]
    L2 = L[1]
    L3 = L[2]

    Ixx1 = Ixx[0]
    Ixx2 = Ixx[1]
    Ixx3 = Ixx[2]

    Iyy1 = Iyy[0]
    Iyy2 = Iyy[1]
    Iyy3 = Iyy[2]

    Izz1 = Izz[0]
    Izz2 = Izz[1]
    Izz3 = Izz[2]

    lx1 = lx[0]
    ly1 = ly[0]
    lx2 = lx[1]
    ly2 = ly[1]
    lx3 = lx[2]
    ly3 = ly[2]

    LfB_distal = (2*(ly3*nx*cos(q1 + q2 + q3) - lx3*ny*cos(q1 + q2 + q3) + lx3*nx*sin(q1 + q2 + q3) + ly3*ny*sin(q1 + q2 + q3))*((Izz3*L1**2*l2**2*m2**2*q5**2*sin(2*q2))/2 - (Izz3*L1**2*l2**2*m2**2*q4**2*sin(2*q2))/2 + Izz1*L2**2*l3**2*m3**2*q4**2*sin(2*q3) + Izz1*L2**2*l3**2*m3**2*q5**2*sin(2*q3) - (Izz1*L2**2*l3**2*m3**2*q6**2*sin(2*q3))/2 + Izz2*L1**3*l3*m3**2*q4**2*sin(q2 + q3) - Izz3*L1**3*L2*m3**2*q4**2*sin(q2) + (Izz2*L1**2*l3**2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 - (Izz2*L1**2*l3**2*m3**2*q5**2*sin(2*q2 + 2*q3))/2 - (Izz2*L1**2*l3**2*m3**2*q6**2*sin(2*q2 + 2*q3))/2 + (L1**2*L2**3*l3*m3**3*q5**2*sin(2*q2 - q3))/2 - (L1**2*L2*l3**3*m3**3*q5**2*sin(2*q2 + 3*q3))/2 - Izz3*L1**3*l2*m2**2*q4**2*sin(q2) + Izz1*L2*l3**3*m3**2*q4**2*sin(q3) + Izz1*L2**3*l3*m3**2*q4**2*sin(q3) + Izz1*L2*l3**3*m3**2*q5**2*sin(q3) + Izz1*L2**3*l3*m3**2*q5**2*sin(q3) - Izz1*L2*l3**3*m3**2*q6**2*sin(q3) + L1**2*L2**2*l3**2*m3**3*q5**2*sin(2*q2) + L1**2*L2**2*l3**2*m3**3*q5**2*sin(2*q3) - L1**2*L2**2*l3**2*m3**3*q5**2*sin(2*q2 + 2*q3) + L1**2*L2*l3**3*m3**3*q5**2*sin(q3) + L1**2*L2**3*l3*m3**3*q5**2*sin(q3) + (L1**2*L2*l3**3*m3**3*q5**2*sin(2*q2 + q3))/2 - (L1**2*L2**3*l3*m3**3*q5**2*sin(2*q2 + q3))/2 - (Izz3*L1**2*L2**2*m3**2*q4**2*sin(2*q2))/2 + (Izz3*L1**2*L2**2*m3**2*q5**2*sin(2*q2))/2 + L1**3*l2**2*l3*m2*m3**2*q4**2*sin(q2 + q3) + (L1**3*l2**2*l3*m2**2*m3*q4**2*sin(q2 + q3))/2 - (L1**3*L2*l3**2*m2*m3**2*q4**2*sin(q2))/2 + L1**2*L2*l3**3*m2*m3**2*q4**2*sin(q3) + L1**2*L2**3*l3*m2*m3**2*q4**2*sin(q3) + L1**2*L2*l3**3*m2*m3**2*q5**2*sin(q3) + L1**2*L2**3*l3*m2*m3**2*q5**2*sin(q3) - L1**2*L2*l3**3*m2*m3**2*q6**2*sin(q3) + 2*Izz1*L2**2*l3**2*m3**2*q4*q5*sin(2*q3) + Izz1*L2**2*l3**2*m3**2*q4*q6*sin(2*q3) + Izz1*L2**2*l3**2*m3**2*q5*q6*sin(2*q3) + (L1**2*l2**2*l3**2*m2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 - (L1**2*l2**2*l3**2*m2*m3**2*q5**2*sin(2*q2 + 2*q3))/2 - (L1**2*l2**2*l3**2*m2*m3**2*q6**2*sin(2*q2 + 2*q3))/2 + Izz2*L1**3*l3*m2*m3*q4**2*sin(q2 + q3) + 2*Izz2*L1**3*l3*m3**2*q4*q5*sin(q2 + q3) + 2*Izz2*L1**3*l3*m3**2*q4*q6*sin(q2 + q3) - Izz3*L1**3*L2*m2*m3*q4**2*sin(q2) + L2*l1**2*l3**3*m1*m3**2*q4**2*sin(q3) - (L1**3*l2*l3**2*m2*m3**2*q4**2*sin(q2))/2 - L1**3*l2*l3**2*m2**2*m3*q4**2*sin(q2) + L2**3*l1**2*l3*m1*m3**2*q4**2*sin(q3) + L2*l1**2*l3**3*m1*m3**2*q5**2*sin(q3) - (L1**2*l2*l3**3*m2*m3**2*q4**2*sin(q3))/2 - (L1**2*l2**3*l3*m2**2*m3*q4**2*sin(q3))/2 + L2**3*l1**2*l3*m1*m3**2*q5**2*sin(q3) - L2*l1**2*l3**3*m1*m3**2*q6**2*sin(q3) + (L1**2*l2*l3**3*m2*m3**2*q5**2*sin(q3))/2 + (L1**2*l2**3*l3*m2**2*m3*q5**2*sin(q3))/2 + (L1**2*l2*l3**3*m2*m3**2*q6**2*sin(q3))/2 - 2*Izz3*L1**3*L2*m3**2*q4*q5*sin(q2) - (L1**3*L2**2*l3*m2*m3**2*q4**2*sin(q2 - q3))/2 + (L1**3*L2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 - Izz2*L1**2*l3**2*m3**2*q5*q6*sin(2*q2 + 2*q3) + (L1**2*L2**3*l3*m3**3*q4*q5*sin(2*q2 - q3))/2 + (L1**2*L2**3*l3*m3**3*q4*q6*sin(2*q2 - q3))/2 - (L1**2*L2*l3**3*m3**3*q4*q5*sin(2*q2 + 3*q3))/2 + (L1**2*L2**3*l3*m3**3*q5*q6*sin(2*q2 - q3))/2 - (L1**3*L2*l3**2*m3**3*q4*q6*sin(3*q2 + 2*q3))/2 - (L1**2*L2*l3**3*m3**3*q5*q6*sin(2*q2 + 3*q3))/2 - Izz3*L1**3*l2*m2*m3*q4**2*sin(q2) - 2*Izz3*L1**3*l2*m2**2*q4*q5*sin(q2) + 2*Izz1*L2*l3**3*m3**2*q4*q5*sin(q3) + 2*Izz1*L2**3*l3*m3**2*q4*q5*sin(q3) + 2*Izz1*L2**3*l3*m3**2*q4*q6*sin(q3) + 2*Izz1*L2**3*l3*m3**2*q5*q6*sin(q3) + (Izz1*L1*L2**2*l3*m3**2*q4**2*sin(q2 + q3))/2 + (L1**3*l2**2*l3*m2**2*m3*q4**2*sin(q2 - q3))/2 - (L1**2*l2*l3**3*m2*m3**2*q4**2*sin(2*q2 + q3))/2 + (L1**2*l2**3*l3*m2**2*m3*q4**2*sin(2*q2 + q3))/2 - (L1**3*l2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 + (L1**2*l2*l3**3*m2*m3**2*q5**2*sin(2*q2 + q3))/2 - (L1**2*l2**3*l3*m2**2*m3*q5**2*sin(2*q2 + q3))/2 + (L1**2*l2*l3**3*m2*m3**2*q6**2*sin(2*q2 + q3))/2 + L1**2*L2**2*l3**2*m3**3*q4*q5*sin(2*q2) + L1**2*L2**2*l3**2*m3**3*q4*q5*sin(2*q3) + (L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q2))/2 + (L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q3))/2 + L1**2*L2**2*l3**2*m3**3*q5*q6*sin(2*q2) + L1**2*L2**2*l3**2*m3**3*q5*q6*sin(2*q3) + L1**3*L2**2*l3*m3**3*q4*q6*sin(q2 + q3) - (Izz1*L1*L2*l3**2*m3**2*q4**2*sin(q2))/2 + (Izz2*L1**2*L2*l3*m3**2*q4**2*sin(q3))/2 + (3*Izz2*L1**2*L2*l3*m3**2*q5**2*sin(q3))/2 + (Izz3*L1**2*L2*l3*m3**2*q4**2*sin(q3))/2 + (3*Izz3*L1**2*L2*l3*m3**2*q5**2*sin(q3))/2 - (Izz3*L1**2*L2*l3*m3**2*q6**2*sin(q3))/2 + Izz1*Izz2*L1*l3*m3*q4**2*sin(q2 + q3) - L1**2*L2**2*l3**2*m3**3*q4*q5*sin(2*q2 + 2*q3) - (L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q2 + 2*q3))/2 - L1**2*L2**2*l3**2*m3**3*q5*q6*sin(2*q2 + 2*q3) - Izz1*Izz3*L1*L2*m3*q4**2*sin(q2) + L1**2*L2*l3**3*m3**3*q4*q5*sin(q3) + L1**2*L2**3*l3*m3**3*q4*q5*sin(q3) + L1**3*L2*l3**2*m3**3*q4*q6*sin(q2) + L1**2*L2**3*l3*m3**3*q4*q6*sin(q3) + L1**2*L2*l3**3*m3**3*q5*q6*sin(q3) + L1**2*L2**3*l3*m3**3*q5*q6*sin(q3) - (Izz1*L1*L2**2*l3*m3**2*q4**2*sin(q2 - q3))/2 + (Izz1*L1*L2*l3**2*m3**2*q4**2*sin(q2 + 2*q3))/2 + (Izz2*L1**2*L2*l3*m3**2*q4**2*sin(2*q2 + q3))/2 - (Izz2*L1**2*L2*l3*m3**2*q5**2*sin(2*q2 + q3))/2 - (Izz3*L1**2*L2*l3*m3**2*q4**2*sin(2*q2 + q3))/2 + (Izz3*L1**2*L2*l3*m3**2*q5**2*sin(2*q2 + q3))/2 + (Izz3*L1**2*L2*l3*m3**2*q6**2*sin(2*q2 + q3))/2 - Izz1*Izz3*L1*l2*m2*q4**2*sin(q2) + Izz1*Izz2*L2*l3*m3*q4**2*sin(q3) + Izz1*Izz2*L2*l3*m3*q5**2*sin(q3) + Izz1*Izz3*L2*l3*m3*q4**2*sin(q3) + Izz1*Izz3*L2*l3*m3*q5**2*sin(q3) - Izz1*Izz3*L2*l3*m3*q6**2*sin(q3) + L1**2*L2**2*l3**2*m2*m3**2*q4**2*sin(2*q3) + L1**2*L2**2*l3**2*m2*m3**2*q5**2*sin(2*q3) - (L1**2*L2**2*l3**2*m2*m3**2*q6**2*sin(2*q3))/2 + (L1**3*L2**2*l3*m2*m3**2*q4**2*sin(q2 + q3))/2 + (L1**2*L2*l3**3*m3**3*q4*q5*sin(2*q2 + q3))/2 - (L1**2*L2**3*l3*m3**3*q4*q5*sin(2*q2 + q3))/2 + (L1**3*L2**2*l3*m3**3*q4*q6*sin(q2 - q3))/2 - (L1**2*L2**3*l3*m3**3*q4*q6*sin(2*q2 + q3))/2 + (L1**3*L2*l3**2*m3**3*q4*q6*sin(q2 + 2*q3))/2 + (L1**2*L2*l3**3*m3**3*q5*q6*sin(2*q2 + q3))/2 - (L1**2*L2**3*l3*m3**3*q5*q6*sin(2*q2 + q3))/2 - (L1**3*L2**2*l3*m3**3*q4*q6*sin(3*q2 + q3))/2 - (L1**2*l2**2*l3**2*m2**2*m3*q4**2*sin(2*q2))/2 + L2**2*l1**2*l3**2*m1*m3**2*q4**2*sin(2*q3) + (L1**2*l2**2*l3**2*m2**2*m3*q5**2*sin(2*q2))/2 + L2**2*l1**2*l3**2*m1*m3**2*q5**2*sin(2*q3) - (L2**2*l1**2*l3**2*m1*m3**2*q6**2*sin(2*q3))/2 + 2*L2**2*l1**2*l3**2*m1*m3**2*q4*q5*sin(2*q3) + L2**2*l1**2*l3**2*m1*m3**2*q4*q6*sin(2*q3) + L2**2*l1**2*l3**2*m1*m3**2*q5*q6*sin(2*q3) - (L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 + (L1**2*L2*l2**2*l3*m2**2*m3*q5**2*sin(2*q2 - q3))/2 + L1**2*L2**2*l2*l3*m2*m3**2*q5**2*sin(2*q2 - q3) - (L1**2*L2*l2*l3**2*m2*m3**2*q5**2*sin(2*q2 + 2*q3))/2 + (L1**2*L2*l2*l3**2*m2*m3**2*q6**2*sin(2*q2 + 2*q3))/2 + 2*L1**3*l2**2*l3*m2*m3**2*q4*q5*sin(q2 + q3) + L1**3*l2**2*l3*m2**2*m3*q4*q5*sin(q2 + q3) + 2*L1**3*l2**2*l3*m2*m3**2*q4*q6*sin(q2 + q3) + L1**3*l2**2*l3*m2**2*m3*q4*q6*sin(q2 + q3) - L1**3*L2*l3**2*m2*m3**2*q4*q5*sin(q2) + 2*L1**2*L2*l3**3*m2*m3**2*q4*q5*sin(q3) + 2*L1**2*L2**3*l3*m2*m3**2*q4*q5*sin(q3) + L1**3*L2*l3**2*m2*m3**2*q4*q6*sin(q2) + 2*L1**2*L2**3*l3*m2*m3**2*q4*q6*sin(q3) + 2*L1**2*L2**3*l3*m2*m3**2*q5*q6*sin(q3) - L1**2*l2**2*l3**2*m2*m3**2*q5*q6*sin(2*q2 + 2*q3) + 2*Izz2*L1**3*l3*m2*m3*q4*q5*sin(q2 + q3) + 2*Izz2*L1**3*l3*m2*m3*q4*q6*sin(q2 + q3) - 2*Izz3*L1**3*L2*m2*m3*q4*q5*sin(q2) + 2*L2*l1**2*l3**3*m1*m3**2*q4*q5*sin(q3) - L1**3*l2*l3**2*m2*m3**2*q4*q5*sin(q2) - 2*L1**3*l2*l3**2*m2**2*m3*q4*q5*sin(q2) + 2*L2**3*l1**2*l3*m1*m3**2*q4*q5*sin(q3) + 2*L2**3*l1**2*l3*m1*m3**2*q4*q6*sin(q3) + 2*L2**3*l1**2*l3*m1*m3**2*q5*q6*sin(q3) + L1**2*l2*l3**3*m2*m3**2*q5*q6*sin(q3) + (L1**3*L2*l2*l3*m2*m3**2*q4**2*sin(q2 - q3))/2 - (L1**3*L2*l2*l3*m2**2*m3*q4**2*sin(q2 - q3))/2 + (L1*L2**2*l1**2*l3*m1*m3**2*q4**2*sin(q2 + q3))/2 - L1**3*L2**2*l3*m2*m3**2*q4*q5*sin(q2 - q3) + L1**3*L2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3) + L1**3*L2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3) - 2*Izz3*L1**3*l2*m2*m3*q4*q5*sin(q2) + Izz1*L1*L2**2*l3*m3**2*q4*q5*sin(q2 + q3) + 2*Izz1*L1*L2**2*l3*m3**2*q4*q6*sin(q2 + q3) + L1**3*l2**2*l3*m2**2*m3*q4*q5*sin(q2 - q3) - L1**3*l2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3) + (L1**3*l2**2*l3*m2**2*m3*q4*q6*sin(q2 - q3))/2 - (L1**3*l2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3))/2 + L1**2*l2*l3**3*m2*m3**2*q5*q6*sin(2*q2 + q3) - (L1**3*l2**2*l3*m2**2*m3*q4*q6*sin(3*q2 + q3))/2 - (L1*L2*l1**2*l3**2*m1*m3**2*q4**2*sin(q2))/2 + (L1**2*L2*l2**2*l3*m2*m3**2*q4**2*sin(q3))/2 + (L1**2*L2*l2**2*l3*m2**2*m3*q4**2*sin(q3))/2 - (3*L1**2*L2**2*l2*l3*m2*m3**2*q4**2*sin(q3))/2 + (3*L1**2*L2*l2**2*l3*m2*m3**2*q5**2*sin(q3))/2 + (L1**2*L2*l2**2*l3*m2**2*m3*q5**2*sin(q3))/2 - (L1**2*L2**2*l2*l3*m2*m3**2*q5**2*sin(q3))/2 + Izz2*L1*l1**2*l3*m1*m3*q4**2*sin(q2 + q3) + Izz1*L1*l2**2*l3*m2*m3*q4**2*sin(q2 + q3) - Izz3*L1*L2*l1**2*m1*m3*q4**2*sin(q2) + Izz2*L1**2*L2*l3*m2*m3*q4**2*sin(q3) + Izz2*L1**2*L2*l3*m2*m3*q5**2*sin(q3) + Izz3*L1**2*L2*l3*m2*m3*q4**2*sin(q3) + Izz3*L1**2*L2*l3*m2*m3*q5**2*sin(q3) - Izz3*L1**2*L2*l3*m2*m3*q6**2*sin(q3) - Izz1*L1*L2*l3**2*m3**2*q4*q5*sin(q2) + Izz1*L1*L2*l3**2*m3**2*q4*q6*sin(q2) + 2*Izz2*L1**2*L2*l3*m3**2*q4*q5*sin(q3) + 2*Izz2*L1**2*L2*l3*m3**2*q4*q6*sin(q3) + 2*Izz3*L1**2*L2*l3*m3**2*q4*q5*sin(q3) + 2*Izz2*L1**2*L2*l3*m3**2*q5*q6*sin(q3) + Izz3*L1**2*L2*l3*m3**2*q5*q6*sin(q3) - (L1*L2**2*l1**2*l3*m1*m3**2*q4**2*sin(q2 - q3))/2 + (L1*L2*l1**2*l3**2*m1*m3**2*q4**2*sin(q2 + 2*q3))/2 + (L1**2*L2*l2**2*l3*m2*m3**2*q4**2*sin(2*q2 + q3))/2 - (L1**2*L2*l2**2*l3*m2**2*m3*q4**2*sin(2*q2 + q3))/2 - (L1**2*L2**2*l2*l3*m2*m3**2*q4**2*sin(2*q2 + q3))/2 - (L1**2*L2*l2**2*l3*m2*m3**2*q5**2*sin(2*q2 + q3))/2 - (L1**2*L2**2*l2*l3*m2*m3**2*q5**2*sin(2*q2 + q3))/2 + 2*Izz1*Izz2*L1*l3*m3*q4*q5*sin(q2 + q3) + 2*Izz1*Izz2*L1*l3*m3*q4*q6*sin(q2 + q3) - Izz3*L1*l1**2*l2*m1*m2*q4**2*sin(q2) - Izz1*L1*l2*l3**2*m2*m3*q4**2*sin(q2) + Izz2*L2*l1**2*l3*m1*m3*q4**2*sin(q3) + Izz1*L2*l2**2*l3*m2*m3*q4**2*sin(q3) + Izz2*L2*l1**2*l3*m1*m3*q5**2*sin(q3) - (Izz2*L1**2*l2*l3*m2*m3*q4**2*sin(q3))/2 + Izz3*L2*l1**2*l3*m1*m3*q4**2*sin(q3) + Izz1*L2*l2**2*l3*m2*m3*q5**2*sin(q3) + (Izz2*L1**2*l2*l3*m2*m3*q5**2*sin(q3))/2 + Izz3*L2*l1**2*l3*m1*m3*q5**2*sin(q3) - (Izz3*L1**2*l2*l3*m2*m3*q4**2*sin(q3))/2 - Izz3*L2*l1**2*l3*m1*m3*q6**2*sin(q3) + (Izz3*L1**2*l2*l3*m2*m3*q5**2*sin(q3))/2 + (Izz3*L1**2*l2*l3*m2*m3*q6**2*sin(q3))/2 - 2*Izz1*Izz3*L1*L2*m3*q4*q5*sin(q2) - Izz1*L1*L2**2*l3*m3**2*q4*q5*sin(q2 - q3) + Izz1*L1*L2*l3**2*m3**2*q4*q5*sin(q2 + 2*q3) + Izz1*L1*L2*l3**2*m3**2*q4*q6*sin(q2 + 2*q3) + Izz3*L1**2*L2*l3*m3**2*q5*q6*sin(2*q2 + q3) - (L1**3*l2*l3**2*m2*m3**2*q4*q6*sin(3*q2 + 2*q3))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q2))/2 - L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q3) + (3*L1**2*L2*l2*l3**2*m2*m3**2*q5**2*sin(2*q2))/2 + (L1**2*L2*l2*l3**2*m2*m3**2*q6**2*sin(2*q3))/2 - 2*Izz1*Izz3*L1*l2*m2*q4*q5*sin(q2) + 2*Izz1*Izz2*L2*l3*m3*q4*q5*sin(q3) + 2*Izz1*Izz2*L2*l3*m3*q4*q6*sin(q3) + 2*Izz1*Izz3*L2*l3*m3*q4*q5*sin(q3) + 2*Izz1*Izz2*L2*l3*m3*q5*q6*sin(q3) + 2*L1**2*L2**2*l3**2*m2*m3**2*q4*q5*sin(2*q3) + L1**2*L2**2*l3**2*m2*m3**2*q4*q6*sin(2*q3) + L1**2*L2**2*l3**2*m2*m3**2*q5*q6*sin(2*q3) + (Izz2*L1**2*l2*l3*m2*m3*q4**2*sin(2*q2 + q3))/2 - (Izz2*L1**2*l2*l3*m2*m3*q5**2*sin(2*q2 + q3))/2 - (Izz3*L1**2*l2*l3*m2*m3*q4**2*sin(2*q2 + q3))/2 + (Izz3*L1**2*l2*l3*m2*m3*q5**2*sin(2*q2 + q3))/2 + (Izz3*L1**2*l2*l3*m2*m3*q6**2*sin(2*q2 + q3))/2 - (3*L1**3*L2*l2*l3*m2*m3**2*q4**2*sin(q2 + q3))/2 - (L1**3*L2*l2*l3*m2**2*m3*q4**2*sin(q2 + q3))/2 + L1**3*L2**2*l3*m2*m3**2*q4*q5*sin(q2 + q3) + 2*L1**3*L2**2*l3*m2*m3**2*q4*q6*sin(q2 + q3) - Izz3*L1**2*L2*l2*m2*m3*q4**2*sin(2*q2) + Izz3*L1**2*L2*l2*m2*m3*q5**2*sin(2*q2) + (L1**2*L2*l2**2*l3*m2**2*m3*q4*q5*sin(2*q2 - q3))/2 + L1**2*L2**2*l2*l3*m2*m3**2*q4*q5*sin(2*q2 - q3) - L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q2 + 2*q3) + (L1**2*L2*l2**2*l3*m2**2*m3*q4*q6*sin(2*q2 - q3))/2 + L1**2*L2**2*l2*l3*m2*m3**2*q4*q6*sin(2*q2 - q3) - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q2 + 2*q3))/2 + (L1**2*L2*l2**2*l3*m2**2*m3*q5*q6*sin(2*q2 - q3))/2 + L1**2*L2**2*l2*l3*m2*m3**2*q5*q6*sin(2*q2 - q3) + L1**3*L2*l2*l3*m2*m3**2*q4*q5*sin(q2 - q3) - L1**3*L2*l2*l3*m2**2*m3*q4*q5*sin(q2 - q3) + L1**3*L2*l2*l3*m2*m3**2*q4*q6*sin(q2 - q3) - L1**3*L2*l2*l3*m2*m3**2*q4*q6*sin(3*q2 + q3) + L1*L2**2*l1**2*l3*m1*m3**2*q4*q5*sin(q2 + q3) + 2*L1*L2**2*l1**2*l3*m1*m3**2*q4*q6*sin(q2 + q3) - (Izz1*L1*L2*l2*l3*m2*m3*q4**2*sin(q2 + q3))/2 + L1*l1**2*l2**2*l3*m1*m2*m3*q4**2*sin(q2 + q3) - L1*L2*l1**2*l3**2*m1*m3**2*q4*q5*sin(q2) + L1*L2*l1**2*l3**2*m1*m3**2*q4*q6*sin(q2) + 2*L1**2*L2*l2**2*l3*m2*m3**2*q4*q5*sin(q3) + L1**2*L2*l2**2*l3*m2**2*m3*q4*q5*sin(q3) - 2*L1**2*L2**2*l2*l3*m2*m3**2*q4*q5*sin(q3) + 2*L1**2*L2*l2**2*l3*m2*m3**2*q4*q6*sin(q3) + L1**2*L2*l2**2*l3*m2**2*m3*q4*q6*sin(q3) - 2*L1**2*L2**2*l2*l3*m2*m3**2*q4*q6*sin(q3) + 2*L1**2*L2*l2**2*l3*m2*m3**2*q5*q6*sin(q3) + L1**2*L2*l2**2*l3*m2**2*m3*q5*q6*sin(q3) - 2*L1**2*L2**2*l2*l3*m2*m3**2*q5*q6*sin(q3) + 2*Izz2*L1*l1**2*l3*m1*m3*q4*q5*sin(q2 + q3) + 2*Izz1*L1*l2**2*l3*m2*m3*q4*q5*sin(q2 + q3) + 2*Izz2*L1*l1**2*l3*m1*m3*q4*q6*sin(q2 + q3) + 2*Izz1*L1*l2**2*l3*m2*m3*q4*q6*sin(q2 + q3) - L1*l1**2*l2*l3**2*m1*m2*m3*q4**2*sin(q2) + L2*l1**2*l2**2*l3*m1*m2*m3*q4**2*sin(q3) + L2*l1**2*l2**2*l3*m1*m2*m3*q5**2*sin(q3) - 2*Izz3*L1*L2*l1**2*m1*m3*q4*q5*sin(q2) + 2*Izz2*L1**2*L2*l3*m2*m3*q4*q5*sin(q3) + 2*Izz2*L1**2*L2*l3*m2*m3*q4*q6*sin(q3) + 2*Izz3*L1**2*L2*l3*m2*m3*q4*q5*sin(q3) + 2*Izz2*L1**2*L2*l3*m2*m3*q5*q6*sin(q3) - L1*L2**2*l1**2*l3*m1*m3**2*q4*q5*sin(q2 - q3) + L1*L2*l1**2*l3**2*m1*m3**2*q4*q5*sin(q2 + 2*q3) + L1*L2*l1**2*l3**2*m1*m3**2*q4*q6*sin(q2 + 2*q3) - (L1**2*L2*l2**2*l3*m2**2*m3*q4*q5*sin(2*q2 + q3))/2 - L1**2*L2**2*l2*l3*m2*m3**2*q4*q5*sin(2*q2 + q3) - (L1**2*L2*l2**2*l3*m2**2*m3*q4*q6*sin(2*q2 + q3))/2 - L1**2*L2**2*l2*l3*m2*m3**2*q4*q6*sin(2*q2 + q3) - (L1**2*L2*l2**2*l3*m2**2*m3*q5*q6*sin(2*q2 + q3))/2 - L1**2*L2**2*l2*l3*m2*m3**2*q5*q6*sin(2*q2 + q3) - 2*Izz3*L1*l1**2*l2*m1*m2*q4*q5*sin(q2) - 2*Izz1*L1*l2*l3**2*m2*m3*q4*q5*sin(q2) + 2*Izz2*L2*l1**2*l3*m1*m3*q4*q5*sin(q3) + 2*Izz1*L2*l2**2*l3*m2*m3*q4*q5*sin(q3) + 2*Izz2*L2*l1**2*l3*m1*m3*q4*q6*sin(q3) + 2*Izz3*L2*l1**2*l3*m1*m3*q4*q5*sin(q3) + 2*Izz1*L2*l2**2*l3*m2*m3*q4*q6*sin(q3) + 2*Izz2*L2*l1**2*l3*m1*m3*q5*q6*sin(q3) + 2*Izz1*L2*l2**2*l3*m2*m3*q5*q6*sin(q3) + Izz3*L1**2*l2*l3*m2*m3*q5*q6*sin(q3) - (Izz1*L1*L2*l2*l3*m2*m3*q4**2*sin(q2 - q3))/2 + L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q2) - L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q3) + (L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q2))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q3))/2 + L1**2*L2*l2*l3**2*m2*m3**2*q5*q6*sin(2*q2) + Izz3*L1**2*l2*l3*m2*m3*q5*q6*sin(2*q2 + q3) - 3*L1**3*L2*l2*l3*m2*m3**2*q4*q5*sin(q2 + q3) - L1**3*L2*l2*l3*m2**2*m3*q4*q5*sin(q2 + q3) - 2*L1**3*L2*l2*l3*m2*m3**2*q4*q6*sin(q2 + q3) - (L1*L2*l1**2*l2*l3*m1*m2*m3*q4**2*sin(q2 + q3))/2 - Izz1*L1*L2*l2*l3*m2*m3*q4*q5*sin(q2 + q3) + 2*L1*l1**2*l2**2*l3*m1*m2*m3*q4*q5*sin(q2 + q3) + 2*L1*l1**2*l2**2*l3*m1*m2*m3*q4*q6*sin(q2 + q3) - 2*L1*l1**2*l2*l3**2*m1*m2*m3*q4*q5*sin(q2) + 2*L2*l1**2*l2**2*l3*m1*m2*m3*q4*q5*sin(q3) + 2*L2*l1**2*l2**2*l3*m1*m2*m3*q4*q6*sin(q3) + 2*L2*l1**2*l2**2*l3*m1*m2*m3*q5*q6*sin(q3) - (L1*L2*l1**2*l2*l3*m1*m2*m3*q4**2*sin(q2 - q3))/2 - Izz1*L1*L2*l2*l3*m2*m3*q4*q5*sin(q2 - q3) - L1*L2*l1**2*l2*l3*m1*m2*m3*q4*q5*sin(q2 + q3) - L1*L2*l1**2*l2*l3*m1*m2*m3*q4*q5*sin(q2 - q3)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3)) - q4*(q6*(lx3*nx*cos(q1 + q2 + q3) + ly3*ny*cos(q1 + q2 + q3) + lx3*ny*sin(q1 + q2 + q3) - ly3*nx*sin(q1 + q2 + q3)) + nx*(L2*cos(q1 + q2) + L1*cos(q1) + ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) + q5*(ny*(L2*cos(q1 + q2) + ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) - nx*(L2*sin(q1 + q2) - lx3*cos(q1 + q2 + q3) + ly3*sin(q1 + q2 + q3))) + ny*(L2*sin(q1 + q2) + L1*sin(q1) - lx3*cos(q1 + q2 + q3) + ly3*sin(q1 + q2 + q3)) + q4*(ny*(L2*cos(q1 + q2) + L1*cos(q1) + ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) - nx*(L2*sin(q1 + q2) + L1*sin(q1) - lx3*cos(q1 + q2 + q3) + ly3*sin(q1 + q2 + q3)))) - q6*(ly3*nx*cos(q1 + q2 + q3) - lx3*ny*cos(q1 + q2 + q3) + lx3*nx*sin(q1 + q2 + q3) + ly3*ny*sin(q1 + q2 + q3) + lx3*nx*q4*cos(q1 + q2 + q3) + lx3*nx*q5*cos(q1 + q2 + q3) + lx3*nx*q6*cos(q1 + q2 + q3) + ly3*ny*q4*cos(q1 + q2 + q3) + ly3*ny*q5*cos(q1 + q2 + q3) + ly3*ny*q6*cos(q1 + q2 + q3) + lx3*ny*q4*sin(q1 + q2 + q3) - ly3*nx*q4*sin(q1 + q2 + q3) + lx3*ny*q5*sin(q1 + q2 + q3) - ly3*nx*q5*sin(q1 + q2 + q3) + lx3*ny*q6*sin(q1 + q2 + q3) - ly3*nx*q6*sin(q1 + q2 + q3)) - (2*(nx*(L2*cos(q1 + q2) + ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) + ny*(L2*sin(q1 + q2) - lx3*cos(q1 + q2 + q3) + ly3*sin(q1 + q2 + q3)))*((Izz3*L1**2*l2**2*m2**2*q5**2*sin(2*q2))/2 - Izz3*L1**2*l2**2*m2**2*q4**2*sin(2*q2) + (Izz1*L2**2*l3**2*m3**2*q4**2*sin(2*q3))/2 + (Izz1*L2**2*l3**2*m3**2*q5**2*sin(2*q3))/2 - Izz2*L1*l3**3*m3**2*q4**2*sin(q2 + q3) + Izz2*L1*l3**3*m3**2*q5**2*sin(q2 + q3) + Izz2*L1*l3**3*m3**2*q6**2*sin(q2 + q3) - Izz3*L1*L2**3*m3**2*q4**2*sin(q2) - Izz3*L1**3*L2*m3**2*q4**2*sin(q2) + Izz3*L1*L2**3*m3**2*q5**2*sin(q2) - (Izz2*L1**2*l3**2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 - (L1**2*L2*l3**3*m3**3*q5**2*sin(2*q2 + 3*q3))/2 - Izz3*L1*l2**3*m2**2*q4**2*sin(q2) - Izz3*L1**3*l2*m2**2*q4**2*sin(q2) + Izz3*L1*l2**3*m2**2*q5**2*sin(q2) + Izz1*L2*l3**3*m3**2*q4**2*sin(q3) + Izz1*L2*l3**3*m3**2*q5**2*sin(q3) - Izz1*L2*l3**3*m3**2*q6**2*sin(q3) + (L1**2*L2**2*l3**2*m3**3*q5**2*sin(2*q2))/2 + (L1**2*L2**2*l3**2*m3**3*q5**2*sin(2*q3))/2 + L1*L2**2*l3**3*m3**3*q5**2*sin(q2 + q3) - (L1**2*L2**2*l3**2*m3**3*q5**2*sin(2*q2 + 2*q3))/2 + L1*L2**3*l3**2*m3**3*q5**2*sin(q2) + L1**2*L2*l3**3*m3**3*q5**2*sin(q3) - (L1*L2**2*l3**3*m3**3*q5**2*sin(q2 - q3))/2 - (L1*L2**3*l3**2*m3**3*q5**2*sin(q2 - 2*q3))/2 - (L1*L2**3*l3**2*m3**3*q5**2*sin(q2 + 2*q3))/2 + (L1**2*L2*l3**3*m3**3*q5**2*sin(2*q2 + q3))/2 - (L1*L2**2*l3**3*m3**3*q5**2*sin(q2 + 3*q3))/2 - Izz3*L1**2*L2**2*m3**2*q4**2*sin(2*q2) + (Izz3*L1**2*L2**2*m3**2*q5**2*sin(2*q2))/2 - L1*l2**2*l3**3*m2*m3**2*q4**2*sin(q2 + q3) + L1*l2**2*l3**3*m2*m3**2*q5**2*sin(q2 + q3) + L1*l2**2*l3**3*m2*m3**2*q6**2*sin(q2 + q3) - (L1**3*L2*l3**2*m2*m3**2*q4**2*sin(q2))/2 + L1**2*L2*l3**3*m2*m3**2*q4**2*sin(q3) + L1**2*L2*l3**3*m2*m3**2*q5**2*sin(q3) - L1**2*L2*l3**3*m2*m3**2*q6**2*sin(q3) - Izz3*L1**2*l2**2*m2**2*q4*q5*sin(2*q2) + Izz1*L2**2*l3**2*m3**2*q4*q5*sin(2*q3) + Izz1*L2**2*l3**2*m3**2*q4*q6*sin(2*q3) + Izz1*L2**2*l3**2*m3**2*q5*q6*sin(2*q3) - (L1**2*l2**2*l3**2*m2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 + 2*Izz2*L1*l3**3*m3**2*q5*q6*sin(q2 + q3) - Izz3*L1**3*L2*m2*m3*q4**2*sin(q2) - L1*l2**3*l3**2*m2**2*m3*q4**2*sin(q2) + L2*l1**2*l3**3*m1*m3**2*q4**2*sin(q3) - (L1**3*l2*l3**2*m2*m3**2*q4**2*sin(q2))/2 - L1**3*l2*l3**2*m2**2*m3*q4**2*sin(q2) + L1*l2**3*l3**2*m2**2*m3*q5**2*sin(q2) + L2*l1**2*l3**3*m1*m3**2*q5**2*sin(q3) - (L1**2*l2*l3**3*m2*m3**2*q4**2*sin(q3))/2 - L2*l1**2*l3**3*m1*m3**2*q6**2*sin(q3) + (L1**2*l2*l3**3*m2*m3**2*q5**2*sin(q3))/2 + (L1**2*l2*l3**3*m2*m3**2*q6**2*sin(q3))/2 - 2*Izz3*L1**3*L2*m3**2*q4*q5*sin(q2) + (L1**3*L2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 - Izz2*L1**2*l3**2*m3**2*q4*q5*sin(2*q2 + 2*q3) - Izz2*L1**2*l3**2*m3**2*q4*q6*sin(2*q2 + 2*q3) - (L1**2*L2*l3**3*m3**3*q4*q5*sin(2*q2 + 3*q3))/2 - (L1**3*L2*l3**2*m3**3*q4*q6*sin(3*q2 + 2*q3))/2 - (L1**2*L2*l3**3*m3**3*q5*q6*sin(2*q2 + 3*q3))/2 - Izz3*L1**3*l2*m2*m3*q4**2*sin(q2) - 2*Izz3*L1**3*l2*m2**2*q4*q5*sin(q2) + 2*Izz1*L2*l3**3*m3**2*q4*q5*sin(q3) - (Izz3*L1*L2**2*l3*m3**2*q4**2*sin(q2 + q3))/2 + (3*Izz3*L1*L2**2*l3*m3**2*q5**2*sin(q2 + q3))/2 + (Izz3*L1*L2**2*l3*m3**2*q6**2*sin(q2 + q3))/2 - (L1**2*l2*l3**3*m2*m3**2*q4**2*sin(2*q2 + q3))/2 - (L1**3*l2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 + (L1**2*l2*l3**3*m2*m3**2*q5**2*sin(2*q2 + q3))/2 + (L1**2*l2*l3**3*m2*m3**2*q6**2*sin(2*q2 + q3))/2 + (L1**2*L2**2*l3**2*m3**3*q4*q5*sin(2*q2))/2 + (L1**2*L2**2*l3**2*m3**3*q4*q5*sin(2*q3))/2 + L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q2) + L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q3) + (L1**2*L2**2*l3**2*m3**3*q5*q6*sin(2*q2))/2 + (L1**2*L2**2*l3**2*m3**3*q5*q6*sin(2*q3))/2 + L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 + q3) + L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 + q3) - (Izz1*L1*L2*l3**2*m3**2*q4**2*sin(q2))/2 - (Izz2*L1*L2*l3**2*m3**2*q4**2*sin(q2))/2 + (3*Izz2*L1*L2*l3**2*m3**2*q5**2*sin(q2))/2 + (Izz3*L1**2*L2*l3*m3**2*q4**2*sin(q3))/2 + (3*Izz3*L1**2*L2*l3*m3**2*q5**2*sin(q3))/2 - (Izz3*L1**2*L2*l3*m3**2*q6**2*sin(q3))/2 - Izz2*Izz3*L1*l3*m3*q4**2*sin(q2 + q3) + Izz2*Izz3*L1*l3*m3*q5**2*sin(q2 + q3) + Izz2*Izz3*L1*l3*m3*q6**2*sin(q2 + q3) - (L1**2*L2**2*l3**2*m3**3*q4*q5*sin(2*q2 + 2*q3))/2 - L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q2 + 2*q3) - (L1**2*L2**2*l3**2*m3**3*q5*q6*sin(2*q2 + 2*q3))/2 - Izz1*Izz3*L1*L2*m3*q4**2*sin(q2) - Izz2*Izz3*L1*L2*m3*q4**2*sin(q2) + Izz2*Izz3*L1*L2*m3*q5**2*sin(q2) + L1*L2**3*l3**2*m3**3*q4*q5*sin(q2) + L1*L2**3*l3**2*m3**3*q4*q6*sin(q2) + L1**2*L2*l3**3*m3**3*q4*q5*sin(q3) + L1**3*L2*l3**2*m3**3*q4*q6*sin(q2) + L1*L2**3*l3**2*m3**3*q5*q6*sin(q2) + L1**2*L2*l3**3*m3**3*q5*q6*sin(q3) + (Izz1*L1*L2*l3**2*m3**2*q4**2*sin(q2 + 2*q3))/2 - (Izz2*L1*L2*l3**2*m3**2*q4**2*sin(q2 + 2*q3))/2 - (Izz3*L1*L2**2*l3*m3**2*q4**2*sin(q2 - q3))/2 - (Izz2*L1*L2*l3**2*m3**2*q5**2*sin(q2 + 2*q3))/2 - (Izz3*L1*L2**2*l3*m3**2*q5**2*sin(q2 - q3))/2 - (Izz3*L1**2*L2*l3*m3**2*q4**2*sin(2*q2 + q3))/2 + (Izz3*L1*L2**2*l3*m3**2*q6**2*sin(q2 - q3))/2 + (Izz3*L1**2*L2*l3*m3**2*q5**2*sin(2*q2 + q3))/2 + (Izz3*L1**2*L2*l3*m3**2*q6**2*sin(2*q2 + q3))/2 - Izz1*Izz3*L1*l2*m2*q4**2*sin(q2) - Izz2*Izz3*L1*l2*m2*q4**2*sin(q2) + Izz2*Izz3*L1*l2*m2*q5**2*sin(q2) + Izz1*Izz3*L2*l3*m3*q4**2*sin(q3) + Izz1*Izz3*L2*l3*m3*q5**2*sin(q3) - Izz1*Izz3*L2*l3*m3*q6**2*sin(q3) + (L1**2*L2**2*l3**2*m2*m3**2*q4**2*sin(2*q3))/2 + (L1**2*L2**2*l3**2*m2*m3**2*q5**2*sin(2*q3))/2 - (L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 - q3))/2 - (L1*L2**3*l3**2*m3**3*q4*q5*sin(q2 - 2*q3))/2 - (L1*L2**3*l3**2*m3**3*q4*q5*sin(q2 + 2*q3))/2 + (L1**2*L2*l3**3*m3**3*q4*q5*sin(2*q2 + q3))/2 - (L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 + 3*q3))/2 - (L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 - q3))/2 - (L1*L2**3*l3**2*m3**3*q4*q6*sin(q2 - 2*q3))/2 - (L1*L2**3*l3**2*m3**3*q4*q6*sin(q2 + 2*q3))/2 + (L1**3*L2*l3**2*m3**3*q4*q6*sin(q2 + 2*q3))/2 - (L1*L2**3*l3**2*m3**3*q5*q6*sin(q2 - 2*q3))/2 - (L1*L2**3*l3**2*m3**3*q5*q6*sin(q2 + 2*q3))/2 + (L1**2*L2*l3**3*m3**3*q5*q6*sin(2*q2 + q3))/2 - (L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 + 3*q3))/2 - L1**2*l2**2*l3**2*m2**2*m3*q4**2*sin(2*q2) + (L2**2*l1**2*l3**2*m1*m3**2*q4**2*sin(2*q3))/2 + (L1**2*l2**2*l3**2*m2**2*m3*q5**2*sin(2*q2))/2 + (L2**2*l1**2*l3**2*m1*m3**2*q5**2*sin(2*q3))/2 - Izz3*L1**2*L2**2*m3**2*q4*q5*sin(2*q2) - L1**2*l2**2*l3**2*m2**2*m3*q4*q5*sin(2*q2) + L2**2*l1**2*l3**2*m1*m3**2*q4*q5*sin(2*q3) + L2**2*l1**2*l3**2*m1*m3**2*q4*q6*sin(2*q3) + L2**2*l1**2*l3**2*m1*m3**2*q5*q6*sin(2*q3) + (L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q5**2*sin(2*q2 + 2*q3))/2 + 2*L1*l2**2*l3**3*m2*m3**2*q5*q6*sin(q2 + q3) - L1**3*L2*l3**2*m2*m3**2*q4*q5*sin(q2) + 2*L1**2*L2*l3**3*m2*m3**2*q4*q5*sin(q3) + L1**3*L2*l3**2*m2*m3**2*q4*q6*sin(q2) - L1**2*l2**2*l3**2*m2*m3**2*q4*q5*sin(2*q2 + 2*q3) - L1**2*l2**2*l3**2*m2*m3**2*q4*q6*sin(2*q2 + 2*q3) - 2*Izz3*L1**3*L2*m2*m3*q4*q5*sin(q2) + 2*L2*l1**2*l3**3*m1*m3**2*q4*q5*sin(q3) - L1**3*l2*l3**2*m2*m3**2*q4*q5*sin(q2) - 2*L1**3*l2*l3**2*m2**2*m3*q4*q5*sin(q2) + L1**2*l2*l3**3*m2*m3**2*q5*q6*sin(q3) - (L1*L2*l2*l3**3*m2*m3**2*q4**2*sin(q2 - q3))/2 - (L1*L2*l2*l3**3*m2*m3**2*q5**2*sin(q2 - q3))/2 + (L1*L2*l2*l3**3*m2*m3**2*q6**2*sin(q2 - q3))/2 + L1**3*L2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3) + L1**3*L2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3) - 2*Izz3*L1**3*l2*m2*m3*q4*q5*sin(q2) + Izz3*L1*L2**2*l3*m3**2*q4*q5*sin(q2 + q3) + 2*Izz3*L1*L2**2*l3*m3**2*q5*q6*sin(q2 + q3) - L1**3*l2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3) - (L1**3*l2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3))/2 + L1**2*l2*l3**3*m2*m3**2*q5*q6*sin(2*q2 + q3) - (L1*L2*l1**2*l3**2*m1*m3**2*q4**2*sin(q2))/2 - (L1*L2*l2**2*l3**2*m2*m3**2*q4**2*sin(q2))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q4**2*sin(q2))/2 + (3*L1*L2*l2**2*l3**2*m2*m3**2*q5**2*sin(q2))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q5**2*sin(q2))/2 - Izz3*L1*l2**2*l3*m2*m3*q4**2*sin(q2 + q3) + Izz3*L1*l2**2*l3*m2*m3*q5**2*sin(q2 + q3) + Izz3*L1*l2**2*l3*m2*m3*q6**2*sin(q2 + q3) - Izz3*L1*L2*l1**2*m1*m3*q4**2*sin(q2) - Izz3*L1*L2*l2**2*m2*m3*q4**2*sin(q2) - Izz3*L1*L2**2*l2*m2*m3*q4**2*sin(q2) + Izz3*L1*L2*l2**2*m2*m3*q5**2*sin(q2) + Izz3*L1*L2**2*l2*m2*m3*q5**2*sin(q2) + Izz3*L1**2*L2*l3*m2*m3*q4**2*sin(q3) + Izz3*L1**2*L2*l3*m2*m3*q5**2*sin(q3) - Izz3*L1**2*L2*l3*m2*m3*q6**2*sin(q3) - Izz1*L1*L2*l3**2*m3**2*q4*q5*sin(q2) + Izz1*L1*L2*l3**2*m3**2*q4*q6*sin(q2) + Izz2*L1*L2*l3**2*m3**2*q4*q5*sin(q2) + Izz2*L1*L2*l3**2*m3**2*q4*q6*sin(q2) + Izz2*L1*L2*l3**2*m3**2*q5*q6*sin(q2) + 2*Izz3*L1**2*L2*l3*m3**2*q4*q5*sin(q3) + Izz3*L1**2*L2*l3*m3**2*q5*q6*sin(q3) + (L1*L2*l1**2*l3**2*m1*m3**2*q4**2*sin(q2 + 2*q3))/2 - (L1*L2*l2**2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 - (L1*L2*l2**2*l3**2*m2*m3**2*q5**2*sin(q2 + 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q5**2*sin(q2 - 2*q3))/2 + 2*Izz2*Izz3*L1*l3*m3*q5*q6*sin(q2 + q3) - Izz3*L1*l1**2*l2*m1*m2*q4**2*sin(q2) - Izz1*L1*l2*l3**2*m2*m3*q4**2*sin(q2) - Izz2*L1*l2*l3**2*m2*m3*q4**2*sin(q2) + Izz2*L1*l2*l3**2*m2*m3*q5**2*sin(q2) + Izz3*L2*l1**2*l3*m1*m3*q4**2*sin(q3) + Izz3*L2*l1**2*l3*m1*m3*q5**2*sin(q3) - (Izz3*L1**2*l2*l3*m2*m3*q4**2*sin(q3))/2 - Izz3*L2*l1**2*l3*m1*m3*q6**2*sin(q3) + (Izz3*L1**2*l2*l3*m2*m3*q5**2*sin(q3))/2 + (Izz3*L1**2*l2*l3*m2*m3*q6**2*sin(q3))/2 - 2*Izz1*Izz3*L1*L2*m3*q4*q5*sin(q2) + Izz1*L1*L2*l3**2*m3**2*q4*q5*sin(q2 + 2*q3) + Izz1*L1*L2*l3**2*m3**2*q4*q6*sin(q2 + 2*q3) - Izz2*L1*L2*l3**2*m3**2*q4*q5*sin(q2 + 2*q3) - Izz3*L1*L2**2*l3*m3**2*q4*q5*sin(q2 - q3) - Izz2*L1*L2*l3**2*m3**2*q4*q6*sin(q2 + 2*q3) - Izz2*L1*L2*l3**2*m3**2*q5*q6*sin(q2 + 2*q3) + Izz3*L1**2*L2*l3*m3**2*q5*q6*sin(2*q2 + q3) - (L1**3*l2*l3**2*m2*m3**2*q4*q6*sin(3*q2 + 2*q3))/2 - L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q2) - (L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q3))/2 + L1**2*L2*l2*l3**2*m2*m3**2*q5**2*sin(2*q2) - 2*Izz1*Izz3*L1*l2*m2*q4*q5*sin(q2) + 2*Izz1*Izz3*L2*l3*m3*q4*q5*sin(q3) + L1**2*L2**2*l3**2*m2*m3**2*q4*q5*sin(2*q3) + L1**2*L2**2*l3**2*m2*m3**2*q4*q6*sin(2*q3) + L1**2*L2**2*l3**2*m2*m3**2*q5*q6*sin(2*q3) - (Izz3*L1**2*l2*l3*m2*m3*q4**2*sin(2*q2 + q3))/2 + (Izz3*L1**2*l2*l3*m2*m3*q5**2*sin(2*q2 + q3))/2 + (Izz3*L1**2*l2*l3*m2*m3*q6**2*sin(2*q2 + q3))/2 + (L1*L2*l2*l3**3*m2*m3**2*q4**2*sin(q2 + q3))/2 + (L1*L2*l2*l3**3*m2*m3**2*q5**2*sin(q2 + q3))/2 - (L1*L2*l2*l3**3*m2*m3**2*q6**2*sin(q2 + q3))/2 - 2*Izz3*L1**2*L2*l2*m2*m3*q4**2*sin(2*q2) + Izz3*L1**2*L2*l2*m2*m3*q5**2*sin(2*q2) - 2*Izz3*L1**2*L2*l2*m2*m3*q4*q5*sin(2*q2) + (L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q2 + 2*q3))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q5*q6*sin(2*q2 + 2*q3))/2 - L1*L2*l2*l3**3*m2*m3**2*q4*q5*sin(q2 - q3) + (Izz3*L1*L2*l2*l3*m2*m3*q4**2*sin(q2 + q3))/2 + (Izz3*L1*L2*l2*l3*m2*m3*q5**2*sin(q2 + q3))/2 - (Izz3*L1*L2*l2*l3*m2*m3*q6**2*sin(q2 + q3))/2 - L1*L2*l1**2*l3**2*m1*m3**2*q4*q5*sin(q2) + L1*L2*l1**2*l3**2*m1*m3**2*q4*q6*sin(q2) + L1*L2*l2**2*l3**2*m2*m3**2*q4*q5*sin(q2) + L1*L2*l2**2*l3**2*m2*m3**2*q4*q6*sin(q2) + L1*L2*l2**2*l3**2*m2*m3**2*q5*q6*sin(q2) + 2*Izz3*L1*l2**2*l3*m2*m3*q5*q6*sin(q2 + q3) - L1*l1**2*l2*l3**2*m1*m2*m3*q4**2*sin(q2) - 2*Izz3*L1*L2*l1**2*m1*m3*q4*q5*sin(q2) + 2*Izz3*L1**2*L2*l3*m2*m3*q4*q5*sin(q3) + L1*L2*l1**2*l3**2*m1*m3**2*q4*q5*sin(q2 + 2*q3) + L1*L2*l1**2*l3**2*m1*m3**2*q4*q6*sin(q2 + 2*q3) - L1*L2*l2**2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3) - (L1*L2**2*l2*l3**2*m2*m3**2*q4*q5*sin(q2 - 2*q3))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3))/2 - L1*L2*l2**2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3) - (L1*L2**2*l2*l3**2*m2*m3**2*q4*q6*sin(q2 - 2*q3))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3))/2 - L1*L2*l2**2*l3**2*m2*m3**2*q5*q6*sin(q2 + 2*q3) - (L1*L2**2*l2*l3**2*m2*m3**2*q5*q6*sin(q2 - 2*q3))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q5*q6*sin(q2 + 2*q3))/2 - 2*Izz3*L1*l1**2*l2*m1*m2*q4*q5*sin(q2) - 2*Izz1*L1*l2*l3**2*m2*m3*q4*q5*sin(q2) + 2*Izz3*L2*l1**2*l3*m1*m3*q4*q5*sin(q3) + Izz3*L1**2*l2*l3*m2*m3*q5*q6*sin(q3) - (Izz3*L1*L2*l2*l3*m2*m3*q4**2*sin(q2 - q3))/2 - (Izz3*L1*L2*l2*l3*m2*m3*q5**2*sin(q2 - q3))/2 + (Izz3*L1*L2*l2*l3*m2*m3*q6**2*sin(q2 - q3))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q2))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q3))/2 + L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q2) + (L1**2*L2*l2*l3**2*m2*m3**2*q5*q6*sin(2*q2))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q5*q6*sin(2*q3))/2 + Izz3*L1**2*l2*l3*m2*m3*q5*q6*sin(2*q2 + q3) + L1*L2*l2*l3**3*m2*m3**2*q4*q5*sin(q2 + q3) + Izz3*L1*L2*l2*l3*m2*m3*q4*q5*sin(q2 + q3) - 2*L1*l1**2*l2*l3**2*m1*m2*m3*q4*q5*sin(q2) - Izz3*L1*L2*l2*l3*m2*m3*q4*q5*sin(q2 - q3)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3)) - q5*(nx*(L2*cos(q1 + q2) + ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) + ny*(L2*sin(q1 + q2) - lx3*cos(q1 + q2 + q3) + ly3*sin(q1 + q2 + q3)) + q6*(lx3*nx*cos(q1 + q2 + q3) + ly3*ny*cos(q1 + q2 + q3) + lx3*ny*sin(q1 + q2 + q3) - ly3*nx*sin(q1 + q2 + q3)) + q4*(ny*(L2*cos(q1 + q2) + ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) - nx*(L2*sin(q1 + q2) - lx3*cos(q1 + q2 + q3) + ly3*sin(q1 + q2 + q3))) + q5*(ny*(L2*cos(q1 + q2) + ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) - nx*(L2*sin(q1 + q2) - lx3*cos(q1 + q2 + q3) + ly3*sin(q1 + q2 + q3)))) - (2*(nx*(L2*cos(q1 + q2) + L1*cos(q1) + ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) + ny*(L2*sin(q1 + q2) + L1*sin(q1) - lx3*cos(q1 + q2 + q3) + ly3*sin(q1 + q2 + q3)))*((Izz3*L1**2*l2**2*m2**2*q4**2*sin(2*q2))/2 + Izz2*L1*l3**3*m3**2*q4**2*sin(q2 + q3) - Izz2*L1*l3**3*m3**2*q5**2*sin(q2 + q3) - Izz2*L1*l3**3*m3**2*q6**2*sin(q2 + q3) + Izz3*L1*L2**3*m3**2*q4**2*sin(q2) - Izz3*L1*L2**3*m3**2*q5**2*sin(q2) + (Izz2*L1**2*l3**2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 + Izz3*L1*l2**3*m2**2*q4**2*sin(q2) - Izz3*L1*l2**3*m2**2*q5**2*sin(q2) - L1*L2**2*l3**3*m3**3*q5**2*sin(q2 + q3) - L1*L2**3*l3**2*m3**3*q5**2*sin(q2) + (L1*L2**2*l3**3*m3**3*q5**2*sin(q2 - q3))/2 + (L1*L2**3*l3**2*m3**3*q5**2*sin(q2 - 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q5**2*sin(q2 + 2*q3))/2 + (L1*L2**2*l3**3*m3**3*q5**2*sin(q2 + 3*q3))/2 + (Izz3*L1**2*L2**2*m3**2*q4**2*sin(2*q2))/2 + L1*l2**2*l3**3*m2*m3**2*q4**2*sin(q2 + q3) - L1*l2**2*l3**3*m2*m3**2*q5**2*sin(q2 + q3) - L1*l2**2*l3**3*m2*m3**2*q6**2*sin(q2 + q3) + Izz3*L1**2*l2**2*m2**2*q4*q5*sin(2*q2) + (L1**2*l2**2*l3**2*m2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 - 2*Izz2*L1*l3**3*m3**2*q5*q6*sin(q2 + q3) + L1*l2**3*l3**2*m2**2*m3*q4**2*sin(q2) - L1*l2**3*l3**2*m2**2*m3*q5**2*sin(q2) + Izz2*L1**2*l3**2*m3**2*q4*q5*sin(2*q2 + 2*q3) + Izz2*L1**2*l3**2*m3**2*q4*q6*sin(2*q2 + 2*q3) + (Izz3*L1*L2**2*l3*m3**2*q4**2*sin(q2 + q3))/2 - (3*Izz3*L1*L2**2*l3*m3**2*q5**2*sin(q2 + q3))/2 - (Izz3*L1*L2**2*l3*m3**2*q6**2*sin(q2 + q3))/2 - (L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q2))/2 - (L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q3))/2 - L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 + q3) - L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 + q3) + (Izz2*L1*L2*l3**2*m3**2*q4**2*sin(q2))/2 - (3*Izz2*L1*L2*l3**2*m3**2*q5**2*sin(q2))/2 + Izz2*Izz3*L1*l3*m3*q4**2*sin(q2 + q3) - Izz2*Izz3*L1*l3*m3*q5**2*sin(q2 + q3) - Izz2*Izz3*L1*l3*m3*q6**2*sin(q2 + q3) + (L1**2*L2**2*l3**2*m3**3*q4*q6*sin(2*q2 + 2*q3))/2 + Izz2*Izz3*L1*L2*m3*q4**2*sin(q2) - Izz2*Izz3*L1*L2*m3*q5**2*sin(q2) - L1*L2**3*l3**2*m3**3*q4*q5*sin(q2) - L1*L2**3*l3**2*m3**3*q4*q6*sin(q2) - L1*L2**3*l3**2*m3**3*q5*q6*sin(q2) + (Izz2*L1*L2*l3**2*m3**2*q4**2*sin(q2 + 2*q3))/2 + (Izz3*L1*L2**2*l3*m3**2*q4**2*sin(q2 - q3))/2 + (Izz2*L1*L2*l3**2*m3**2*q5**2*sin(q2 + 2*q3))/2 + (Izz3*L1*L2**2*l3*m3**2*q5**2*sin(q2 - q3))/2 - (Izz3*L1*L2**2*l3*m3**2*q6**2*sin(q2 - q3))/2 + Izz2*Izz3*L1*l2*m2*q4**2*sin(q2) - Izz2*Izz3*L1*l2*m2*q5**2*sin(q2) + (L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 - q3))/2 + (L1*L2**3*l3**2*m3**3*q4*q5*sin(q2 - 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q4*q5*sin(q2 + 2*q3))/2 + (L1*L2**2*l3**3*m3**3*q4*q5*sin(q2 + 3*q3))/2 + (L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 - q3))/2 + (L1*L2**3*l3**2*m3**3*q4*q6*sin(q2 - 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q4*q6*sin(q2 + 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q5*q6*sin(q2 - 2*q3))/2 + (L1*L2**3*l3**2*m3**3*q5*q6*sin(q2 + 2*q3))/2 + (L1*L2**2*l3**3*m3**3*q5*q6*sin(q2 + 3*q3))/2 + (L1**2*l2**2*l3**2*m2**2*m3*q4**2*sin(2*q2))/2 + Izz3*L1**2*L2**2*m3**2*q4*q5*sin(2*q2) + L1**2*l2**2*l3**2*m2**2*m3*q4*q5*sin(2*q2) - (L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q2 + 2*q3))/2 - 2*L1*l2**2*l3**3*m2*m3**2*q5*q6*sin(q2 + q3) + L1**2*l2**2*l3**2*m2*m3**2*q4*q5*sin(2*q2 + 2*q3) + L1**2*l2**2*l3**2*m2*m3**2*q4*q6*sin(2*q2 + 2*q3) + (L1*L2*l2*l3**3*m2*m3**2*q4**2*sin(q2 - q3))/2 + (L1*L2*l2*l3**3*m2*m3**2*q5**2*sin(q2 - q3))/2 - (L1*L2*l2*l3**3*m2*m3**2*q6**2*sin(q2 - q3))/2 - Izz3*L1*L2**2*l3*m3**2*q4*q5*sin(q2 + q3) - 2*Izz3*L1*L2**2*l3*m3**2*q5*q6*sin(q2 + q3) + (L1*L2*l2**2*l3**2*m2*m3**2*q4**2*sin(q2))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q4**2*sin(q2))/2 - (3*L1*L2*l2**2*l3**2*m2*m3**2*q5**2*sin(q2))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q5**2*sin(q2))/2 + Izz3*L1*l2**2*l3*m2*m3*q4**2*sin(q2 + q3) - Izz3*L1*l2**2*l3*m2*m3*q5**2*sin(q2 + q3) - Izz3*L1*l2**2*l3*m2*m3*q6**2*sin(q2 + q3) + Izz3*L1*L2*l2**2*m2*m3*q4**2*sin(q2) + Izz3*L1*L2**2*l2*m2*m3*q4**2*sin(q2) - Izz3*L1*L2*l2**2*m2*m3*q5**2*sin(q2) - Izz3*L1*L2**2*l2*m2*m3*q5**2*sin(q2) - Izz2*L1*L2*l3**2*m3**2*q4*q5*sin(q2) - Izz2*L1*L2*l3**2*m3**2*q4*q6*sin(q2) - Izz2*L1*L2*l3**2*m3**2*q5*q6*sin(q2) + (L1*L2*l2**2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q4**2*sin(q2 + 2*q3))/2 + (L1*L2*l2**2*l3**2*m2*m3**2*q5**2*sin(q2 + 2*q3))/2 + (L1*L2**2*l2*l3**2*m2*m3**2*q5**2*sin(q2 - 2*q3))/2 - 2*Izz2*Izz3*L1*l3*m3*q5*q6*sin(q2 + q3) + Izz2*L1*l2*l3**2*m2*m3*q4**2*sin(q2) - Izz2*L1*l2*l3**2*m2*m3*q5**2*sin(q2) + Izz2*L1*L2*l3**2*m3**2*q4*q5*sin(q2 + 2*q3) + Izz3*L1*L2**2*l3*m3**2*q4*q5*sin(q2 - q3) + Izz2*L1*L2*l3**2*m3**2*q4*q6*sin(q2 + 2*q3) + Izz2*L1*L2*l3**2*m3**2*q5*q6*sin(q2 + 2*q3) + (L1**2*L2*l2*l3**2*m2*m3**2*q4**2*sin(2*q2))/2 - (L1*L2*l2*l3**3*m2*m3**2*q4**2*sin(q2 + q3))/2 - (L1*L2*l2*l3**3*m2*m3**2*q5**2*sin(q2 + q3))/2 + (L1*L2*l2*l3**3*m2*m3**2*q6**2*sin(q2 + q3))/2 + Izz3*L1**2*L2*l2*m2*m3*q4**2*sin(2*q2) + 2*Izz3*L1**2*L2*l2*m2*m3*q4*q5*sin(2*q2) - L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q2 + 2*q3) - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q2 + 2*q3))/2 + L1*L2*l2*l3**3*m2*m3**2*q4*q5*sin(q2 - q3) - (Izz3*L1*L2*l2*l3*m2*m3*q4**2*sin(q2 + q3))/2 - (Izz3*L1*L2*l2*l3*m2*m3*q5**2*sin(q2 + q3))/2 + (Izz3*L1*L2*l2*l3*m2*m3*q6**2*sin(q2 + q3))/2 - L1*L2*l2**2*l3**2*m2*m3**2*q4*q5*sin(q2) - L1*L2*l2**2*l3**2*m2*m3**2*q4*q6*sin(q2) - L1*L2*l2**2*l3**2*m2*m3**2*q5*q6*sin(q2) - 2*Izz3*L1*l2**2*l3*m2*m3*q5*q6*sin(q2 + q3) + L1*L2*l2**2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3) + (L1*L2**2*l2*l3**2*m2*m3**2*q4*q5*sin(q2 - 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q4*q5*sin(q2 + 2*q3))/2 + L1*L2*l2**2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3) + (L1*L2**2*l2*l3**2*m2*m3**2*q4*q6*sin(q2 - 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q4*q6*sin(q2 + 2*q3))/2 + L1*L2*l2**2*l3**2*m2*m3**2*q5*q6*sin(q2 + 2*q3) + (L1*L2**2*l2*l3**2*m2*m3**2*q5*q6*sin(q2 - 2*q3))/2 - (L1*L2**2*l2*l3**2*m2*m3**2*q5*q6*sin(q2 + 2*q3))/2 + (Izz3*L1*L2*l2*l3*m2*m3*q4**2*sin(q2 - q3))/2 + (Izz3*L1*L2*l2*l3*m2*m3*q5**2*sin(q2 - q3))/2 - (Izz3*L1*L2*l2*l3*m2*m3*q6**2*sin(q2 - q3))/2 + L1**2*L2*l2*l3**2*m2*m3**2*q4*q5*sin(2*q2) - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q2))/2 - (L1**2*L2*l2*l3**2*m2*m3**2*q4*q6*sin(2*q3))/2 - L1*L2*l2*l3**3*m2*m3**2*q4*q5*sin(q2 + q3) - Izz3*L1*L2*l2*l3*m2*m3*q4*q5*sin(q2 + q3) + Izz3*L1*L2*l2*l3*m2*m3*q4*q5*sin(q2 - q3)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3))
    return LfB_distal

def LgB_distal(q, L, l, m, Ixx, Iyy, Izz, z, lx, ly, nx, ny, pcx, pcy):
    q1 = q[0]

    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q4 = q[3]
    q5 = q[4]
    q6 = q[5]

    m1 = m[0]
    m2 = m[1]
    m3 = m[2]

    l1 = l[0]
    l2 = l[1]
    l3 = l[2]

    L1 = L[0]
    L2 = L[1]
    L3 = L[2]

    Ixx1 = Ixx[0]
    Ixx2 = Ixx[1]
    Ixx3 = Ixx[2]

    Iyy1 = Iyy[0]
    Iyy2 = Iyy[1]
    Iyy3 = Iyy[2]

    Izz1 = Izz[0]
    Izz2 = Izz[1]
    Izz3 = Izz[2]

    lx1 = lx[0]
    ly1 = ly[0]
    lx2 = lx[1]
    ly2 = ly[1]
    lx3 = lx[2]
    ly3 = ly[2]

    LgB_distal =[-(4*Izz2*Izz3*L1*nx*cos(q1) + 4*Izz2*Izz3*L1*ny*sin(q1) + L1*L2**2*l3**2*m3**2*nx*cos(q1) + L1*L2**2*l3**2*m3**2*nx*cos(q1 + 2*q2 + 2*q3) + L1*L2**2*l3**2*m3**2*ny*sin(q1) + L1*L2**2*l3**2*m3**2*ny*sin(q1 + 2*q2 + 2*q3) + 2*Izz3*L1*L2**2*m3*nx*cos(q1) + 2*Izz3*L1*L2**2*m3*ny*sin(q1) - L1*L2**2*l3**2*m3**2*nx*cos(q1 + 2*q2) - L1*L2**2*l3**2*m3**2*nx*cos(q1 + 2*q3) + 4*Izz3*L1*l2**2*m2*nx*cos(q1) + 4*Izz2*L1*l3**2*m3*nx*cos(q1) - L1*L2**2*l3**2*m3**2*ny*sin(q1 + 2*q2) - L1*L2**2*l3**2*m3**2*ny*sin(q1 + 2*q3) - 2*Izz3*L1*L2**2*m3*nx*cos(q1 + 2*q2) + 4*Izz3*L1*l2**2*m2*ny*sin(q1) + 4*Izz2*L1*l3**2*m3*ny*sin(q1) - 2*Izz3*L1*L2**2*m3*ny*sin(q1 + 2*q2) + L1*L2**2*l3*lx3*m3**2*ny*cos(q1) - L1*L2**2*l3*ly3*m3**2*nx*cos(q1) + L1*L2**2*l3*lx3*m3**2*ny*cos(q1 + 2*q2 + 2*q3) - L1*L2**2*l3*ly3*m3**2*nx*cos(q1 + 2*q2 + 2*q3) - L1*L2**2*l3*lx3*m3**2*nx*sin(q1) - L1*L2**2*l3*ly3*m3**2*ny*sin(q1) - L1*L2**2*l3*lx3*m3**2*nx*sin(q1 + 2*q2 + 2*q3) - L1*L2**2*l3*ly3*m3**2*ny*sin(q1 + 2*q2 + 2*q3) - 2*Izz3*L1*L2*l2*m2*nx*cos(q1) + 4*L1*l2**2*l3**2*m2*m3*nx*cos(q1) - 2*Izz3*L1*L2*l2*m2*ny*sin(q1) - L1*L2**2*l3*lx3*m3**2*ny*cos(q1 + 2*q2) + L1*L2**2*l3*ly3*m3**2*nx*cos(q1 + 2*q2) - L1*L2**2*l3*lx3*m3**2*ny*cos(q1 + 2*q3) + L1*L2**2*l3*ly3*m3**2*nx*cos(q1 + 2*q3) + 4*L1*l2**2*l3**2*m2*m3*ny*sin(q1) + 2*Izz2*L1*l3*lx3*m3*ny*cos(q1) - 2*Izz2*L1*l3*ly3*m3*nx*cos(q1) + 2*Izz2*L1*l3*lx3*m3*ny*cos(q1 + 2*q2 + 2*q3) - 2*Izz2*L1*l3*ly3*m3*nx*cos(q1 + 2*q2 + 2*q3) + L1*L2**2*l3*lx3*m3**2*nx*sin(q1 + 2*q2) + L1*L2**2*l3*lx3*m3**2*nx*sin(q1 + 2*q3) + L1*L2**2*l3*ly3*m3**2*ny*sin(q1 + 2*q2) + L1*L2**2*l3*ly3*m3**2*ny*sin(q1 + 2*q3) - 2*Izz3*L1*L2*l2*m2*nx*cos(q1 + 2*q2) - 2*Izz2*L1*l3*lx3*m3*nx*sin(q1) - 2*Izz2*L1*l3*ly3*m3*ny*sin(q1) - 2*Izz2*L1*l3*lx3*m3*nx*sin(q1 + 2*q2 + 2*q3) - 2*Izz2*L1*l3*ly3*m3*ny*sin(q1 + 2*q2 + 2*q3) - 2*Izz3*L1*L2*l2*m2*ny*sin(q1 + 2*q2) - 2*L1*L2*l2*l3**2*m2*m3*nx*cos(q1) - 2*L1*L2*l2*l3**2*m2*m3*ny*sin(q1) + 2*L1*l2**2*l3*lx3*m2*m3*ny*cos(q1) - 2*L1*l2**2*l3*ly3*m2*m3*nx*cos(q1) + 2*L1*l2**2*l3*lx3*m2*m3*ny*cos(q1 + 2*q2 + 2*q3) - 2*L1*l2**2*l3*ly3*m2*m3*nx*cos(q1 + 2*q2 + 2*q3) - 2*L1*L2*l2*l3**2*m2*m3*nx*cos(q1 + 2*q2) - 2*L1*l2**2*l3*lx3*m2*m3*nx*sin(q1) - 2*L1*l2**2*l3*ly3*m2*m3*ny*sin(q1) - 2*L1*l2**2*l3*lx3*m2*m3*nx*sin(q1 + 2*q2 + 2*q3) - 2*L1*l2**2*l3*ly3*m2*m3*ny*sin(q1 + 2*q2 + 2*q3) - 2*L1*L2*l2*l3**2*m2*m3*ny*sin(q1 + 2*q2) - L1*L2*l2*l3*lx3*m2*m3*ny*cos(q1) + L1*L2*l2*l3*ly3*m2*m3*nx*cos(q1) - L1*L2*l2*l3*lx3*m2*m3*ny*cos(q1 + 2*q2 + 2*q3) + L1*L2*l2*l3*ly3*m2*m3*nx*cos(q1 + 2*q2 + 2*q3) + L1*L2*l2*l3*lx3*m2*m3*nx*sin(q1) + L1*L2*l2*l3*ly3*m2*m3*ny*sin(q1) + L1*L2*l2*l3*lx3*m2*m3*nx*sin(q1 + 2*q2 + 2*q3) + L1*L2*l2*l3*ly3*m2*m3*ny*sin(q1 + 2*q2 + 2*q3) - L1*L2*l2*l3*lx3*m2*m3*ny*cos(q1 + 2*q2) + L1*L2*l2*l3*ly3*m2*m3*nx*cos(q1 + 2*q2) - L1*L2*l2*l3*lx3*m2*m3*ny*cos(q1 + 2*q3) + L1*L2*l2*l3*ly3*m2*m3*nx*cos(q1 + 2*q3) + L1*L2*l2*l3*lx3*m2*m3*nx*sin(q1 + 2*q2) + L1*L2*l2*l3*lx3*m2*m3*nx*sin(q1 + 2*q3) + L1*L2*l2*l3*ly3*m2*m3*ny*sin(q1 + 2*q2) + L1*L2*l2*l3*ly3*m2*m3*ny*sin(q1 + 2*q3))/(2*(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3))), -(2*(Izz1*Izz3*L2*nx*cos(q1 + q2) + Izz1*Izz3*L2*ny*sin(q1 + q2) - Izz2*Izz3*L1*nx*cos(q1) - Izz2*Izz3*L1*ny*sin(q1) + L1**2*L2*l3**2*m3**2*nx*cos(q1 + q2) + L1**2*L2*l3**2*m3**2*ny*sin(q1 + q2) + Izz3*L1**2*L2*m2*nx*cos(q1 + q2) + Izz3*L1**2*L2*m3*nx*cos(q1 + q2) + Izz3*L1**2*L2*m2*ny*sin(q1 + q2) + Izz3*L1**2*L2*m3*ny*sin(q1 + q2) - L1*L2**2*l3**2*m3**2*nx*cos(q1) + Izz3*L2*l1**2*m1*nx*cos(q1 + q2) + Izz1*L2*l3**2*m3*nx*cos(q1 + q2) - L1*L2**2*l3**2*m3**2*ny*sin(q1) - Izz3*L1*L2**2*m3*nx*cos(q1) + Izz3*L2*l1**2*m1*ny*sin(q1 + q2) + Izz1*L2*l3**2*m3*ny*sin(q1 + q2) - Izz3*L1*L2**2*m3*ny*sin(q1) - Izz3*L1*l2**2*m2*nx*cos(q1) - Izz2*L1*l3**2*m3*nx*cos(q1) - Izz3*L1*l2**2*m2*ny*sin(q1) - Izz2*L1*l3**2*m3*ny*sin(q1) + Izz3*L1*L2**2*m3*ny*sin(q1 + q2)*cos(q2) - L1**2*L2*l3**2*m3**2*nx*cos(q1)*cos(q2) - L1**2*L2*l3**2*m3**2*nx*cos(q1 + q2)*cos(q2 + q3)**2 + L1**2*L2*l3**2*m2*m3*nx*cos(q1 + q2) - L1**2*L2*l3**2*m3**2*ny*cos(q2)*sin(q1) - L1**2*L2*l3**2*m3**2*ny*cos(q2 + q3)**2*sin(q1 + q2) + L1**2*L2*l3**2*m2*m3*ny*sin(q1 + q2) - Izz3*L1**2*L2*m3*nx*cos(q1)*cos(q2) + L2*l1**2*l3**2*m1*m3*nx*cos(q1 + q2) - L1*L2**2*l3*lx3*m3**2*ny*(cos(q1)/2 + cos(q1 + 2*q2 + 2*q3)/2) + L1*L2**2*l3*ly3*m3**2*nx*(cos(q1)/2 + cos(q1 + 2*q2 + 2*q3)/2) - Izz3*L1**2*L2*m3*ny*cos(q2)*sin(q1) + L2*l1**2*l3**2*m1*m3*ny*sin(q1 + q2) - Izz3*L1**2*l2*m2*nx*cos(q1)*cos(q2) + L1*L2**2*l3*lx3*m3**2*nx*(sin(q1)/2 + sin(q1 + 2*q2 + 2*q3)/2) + L1*L2**2*l3*ly3*m3**2*ny*(sin(q1)/2 + sin(q1 + 2*q2 + 2*q3)/2) - Izz3*L1**2*l2*m2*ny*cos(q2)*sin(q1) - L1*l2**2*l3**2*m2*m3*nx*cos(q1) + L1*L2**2*l3**2*m3**2*nx*cos(q1)*cos(q3)**2 - L1*l2**2*l3**2*m2*m3*ny*sin(q1) - Izz2*L1*l3*lx3*m3*ny*(cos(q1)/2 + cos(q1 + 2*q2 + 2*q3)/2) + Izz2*L1*l3*ly3*m3*nx*(cos(q1)/2 + cos(q1 + 2*q2 + 2*q3)/2) + L1*L2**2*l3**2*m3**2*ny*cos(q3)**2*sin(q1) + Izz2*L1*l3*lx3*m3*nx*(sin(q1)/2 + sin(q1 + 2*q2 + 2*q3)/2) + Izz2*L1*l3*ly3*m3*ny*(sin(q1)/2 + sin(q1 + 2*q2 + 2*q3)/2) + L1*L2**2*l3**2*m3**2*nx*cos(q1 + q2)*cos(q2) + L1*L2**2*l3**2*m3**2*ny*sin(q1 + q2)*cos(q2) + Izz3*L1*L2**2*m3*nx*cos(q1 + q2)*cos(q2) + Izz3*L1*L2*l2*m2*nx*cos(q1 + q2)*cos(q2) + Izz3*L1*L2*l2*m2*ny*sin(q1 + q2)*cos(q2) - L1**2*l2*l3**2*m2*m3*nx*cos(q1)*cos(q2) - L1**2*l2*l3**2*m2*m3*ny*cos(q2)*sin(q1) + L1**2*L2*l3*lx3*m3**2*ny*cos(q1 + q2 + q3)*cos(q3) - L1**2*L2*l3*ly3*m3**2*nx*cos(q1 + q2 + q3)*cos(q3) - L1*l2**2*l3*lx3*m2*m3*ny*(cos(q1)/2 + cos(q1 + 2*q2 + 2*q3)/2) + L1*l2**2*l3*ly3*m2*m3*nx*(cos(q1)/2 + cos(q1 + 2*q2 + 2*q3)/2) - L1**2*L2*l3*lx3*m3**2*nx*sin(q1 + q2 + q3)*cos(q3) - L1**2*L2*l3*ly3*m3**2*ny*sin(q1 + q2 + q3)*cos(q3) - L1*L2**2*l3**2*m3**2*nx*cos(q1 + q2)*cos(q2 + q3)*cos(q3) + L1*l2**2*l3*lx3*m2*m3*nx*(sin(q1)/2 + sin(q1 + 2*q2 + 2*q3)/2) + L1*l2**2*l3*ly3*m2*m3*ny*(sin(q1)/2 + sin(q1 + 2*q2 + 2*q3)/2) - L1*L2**2*l3**2*m3**2*ny*cos(q2 + q3)*sin(q1 + q2)*cos(q3) + Izz1*L2*l3*lx3*m3*ny*cos(q1 + q2 + q3)*cos(q3) - Izz1*L2*l3*ly3*m3*nx*cos(q1 + q2 + q3)*cos(q3) - Izz1*L2*l3*lx3*m3*nx*sin(q1 + q2 + q3)*cos(q3) - Izz1*L2*l3*ly3*m3*ny*sin(q1 + q2 + q3)*cos(q3) + L1**2*L2*l3**2*m3**2*nx*cos(q2 + q3)*cos(q1)*cos(q3) + L1**2*L2*l3**2*m3**2*ny*cos(q2 + q3)*cos(q3)*sin(q1) + L1*L2*l2*l3**2*m2*m3*ny*sin(q1 + q2)*cos(q2) + L1**2*L2*l3*lx3*m3**2*nx*sin(q1 + q2 + q3)*cos(q2 + q3)*cos(q2) + L1**2*L2*l3*ly3*m3**2*ny*sin(q1 + q2 + q3)*cos(q2 + q3)*cos(q2) + L1*L2**2*l3*lx3*m3**2*ny*cos(q1 + q2 + q3)*cos(q2)*cos(q3) - L1*L2**2*l3*ly3*m3**2*nx*cos(q1 + q2 + q3)*cos(q2)*cos(q3) - L1*L2**2*l3*lx3*m3**2*nx*sin(q1 + q2 + q3)*cos(q2)*cos(q3) - L1*L2**2*l3*ly3*m3**2*ny*sin(q1 + q2 + q3)*cos(q2)*cos(q3) + L1**2*L2*l3*lx3*m2*m3*ny*cos(q1 + q2 + q3)*cos(q3) - L1**2*L2*l3*ly3*m2*m3*nx*cos(q1 + q2 + q3)*cos(q3) - L1**2*L2*l3*lx3*m2*m3*nx*sin(q1 + q2 + q3)*cos(q3) - L1**2*L2*l3*ly3*m2*m3*ny*sin(q1 + q2 + q3)*cos(q3) + L2*l1**2*l3*lx3*m1*m3*ny*cos(q1 + q2 + q3)*cos(q3) - L2*l1**2*l3*ly3*m1*m3*nx*cos(q1 + q2 + q3)*cos(q3) - L2*l1**2*l3*lx3*m1*m3*nx*sin(q1 + q2 + q3)*cos(q3) - L2*l1**2*l3*ly3*m1*m3*ny*sin(q1 + q2 + q3)*cos(q3) + L1*L2*l2*l3**2*m2*m3*nx*cos(q1 + q2)*cos(q2) - L1**2*L2*l3*lx3*m3**2*ny*cos(q1 + q2 + q3)*cos(q2 + q3)*cos(q2) + L1**2*L2*l3*ly3*m3**2*nx*cos(q1 + q2 + q3)*cos(q2 + q3)*cos(q2) - L1**2*l2*l3*lx3*m2*m3*ny*cos(q1 + q2 + q3)*cos(q2 + q3)*cos(q2) + L1**2*l2*l3*ly3*m2*m3*nx*cos(q1 + q2 + q3)*cos(q2 + q3)*cos(q2) + L1**2*l2*l3*lx3*m2*m3*nx*sin(q1 + q2 + q3)*cos(q2 + q3)*cos(q2) + L1**2*l2*l3*ly3*m2*m3*ny*sin(q1 + q2 + q3)*cos(q2 + q3)*cos(q2) + L1*L2*l2*l3*lx3*m2*m3*ny*cos(q1 + q2 + q3)*cos(q2)*cos(q3) - L1*L2*l2*l3*ly3*m2*m3*nx*cos(q1 + q2 + q3)*cos(q2)*cos(q3) - L1*L2*l2*l3*lx3*m2*m3*nx*sin(q1 + q2 + q3)*cos(q2)*cos(q3) - L1*L2*l2*l3*ly3*m2*m3*ny*sin(q1 + q2 + q3)*cos(q2)*cos(q3)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3)), (2*(nx*(L2*cos(q1 + q2) + ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) + ny*(L2*sin(q1 + q2) - lx3*cos(q1 + q2 + q3) + ly3*sin(q1 + q2 + q3)))*(Izz1*Izz3 + L1**2*l3**2*m3**2 + Izz3*L1**2*m2 + Izz3*L1**2*m3 + Izz3*l1**2*m1 + Izz1*l3**2*m3 - L1**2*l3**2*m3**2*cos(q2 + q3)**2 + L1**2*l3**2*m2*m3 + l1**2*l3**2*m1*m3 - L1*L2**2*l3*m3**2*cos(q2 + q3) + L1*L2*l3**2*m3**2*cos(q2) + L1**2*L2*l3*m3**2*cos(q3) - Izz2*L1*l3*m3*cos(q2 + q3) + Izz3*L1*L2*m3*cos(q2) + Izz3*L1*l2*m2*cos(q2) + Izz1*L2*l3*m3*cos(q3) - L1**2*L2*l3*m3**2*cos(q2 + q3)*cos(q2) - L1*L2*l3**2*m3**2*cos(q2 + q3)*cos(q3) + L1*L2**2*l3*m3**2*cos(q2)*cos(q3) - L1*l2**2*l3*m2*m3*cos(q2 + q3) + L1**2*L2*l3*m2*m3*cos(q3) + L1*l2*l3**2*m2*m3*cos(q2) + L2*l1**2*l3*m1*m3*cos(q3) - L1**2*l2*l3*m2*m3*cos(q2 + q3)*cos(q2) + L1*L2*l2*l3*m2*m3*cos(q2)*cos(q3)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3)) - (2*(ly3*nx*cos(q1 + q2 + q3) - lx3*ny*cos(q1 + q2 + q3) + lx3*nx*sin(q1 + q2 + q3) + ly3*ny*sin(q1 + q2 + q3))*(Izz1*Izz2 + Izz1*Izz3 + L1**2*L2**2*m3**2 + L1**2*l2**2*m2**2 + L1**2*l3**2*m3**2 + Izz2*L1**2*m2 + Izz1*L2**2*m3 + Izz2*L1**2*m3 + Izz3*L1**2*m2 + Izz3*L1**2*m3 + Izz2*l1**2*m1 + Izz1*l2**2*m2 + Izz3*l1**2*m1 + Izz1*l3**2*m3 + L1**2*L2**2*m2*m3 - L1**2*l3**2*m3**2*cos(q2 + q3)**2 + L2**2*l1**2*m1*m3 + L1**2*l2**2*m2*m3 + L1**2*l3**2*m2*m3 - L1**2*L2**2*m3**2*cos(q2)**2 + l1**2*l2**2*m1*m2 + l1**2*l3**2*m1*m3 - L1**2*l2**2*m2**2*cos(q2)**2 + 2*L1**2*L2*l3*m3**2*cos(q3) + 2*Izz1*L2*l3*m3*cos(q3) - 2*L1**2*L2*l3*m3**2*cos(q2 + q3)*cos(q2) + 2*L1**2*L2*l3*m2*m3*cos(q3) + 2*L2*l1**2*l3*m1*m3*cos(q3) - 2*L1**2*L2*l2*m2*m3*cos(q2)**2 - 2*L1**2*l2*l3*m2*m3*cos(q2 + q3)*cos(q2)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3)) - (2*L1*(nx*(L2*cos(q1 + q2) + L1*cos(q1) + ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) + ny*(L2*sin(q1 + q2) + L1*sin(q1) - lx3*cos(q1 + q2 + q3) + ly3*sin(q1 + q2 + q3)))*(L2*l3**2*m3**2*cos(q2) - Izz2*l3*m3*cos(q2 + q3) + Izz3*L2*m3*cos(q2) + Izz3*l2*m2*cos(q2) - L2**2*l3*m3**2*cos(q2 + q3) - l2**2*l3*m2*m3*cos(q2 + q3) + l2*l3**2*m2*m3*cos(q2) - L2*l3**2*m3**2*cos(q2 + q3)*cos(q3) + L2**2*l3*m3**2*cos(q2)*cos(q3) + L2*l2*l3*m2*m3*cos(q2)*cos(q3)))/(2*Izz1*Izz2*Izz3 + 2*Izz2*Izz3*L1**2*m2 + 2*Izz1*Izz3*L2**2*m3 + 2*Izz2*Izz3*L1**2*m3 + 2*Izz2*Izz3*l1**2*m1 + 2*Izz1*Izz3*l2**2*m2 + 2*Izz1*Izz2*l3**2*m3 + Izz3*L1**2*L2**2*m3**2 + Izz3*L1**2*l2**2*m2**2 + Izz1*L2**2*l3**2*m3**2 + Izz2*L1**2*l3**2*m3**2 - Izz3*L1**2*L2**2*m3**2*cos(2*q2) + 2*Izz3*l1**2*l2**2*m1*m2 + 2*Izz2*l1**2*l3**2*m1*m3 + 2*Izz1*l2**2*l3**2*m2*m3 - Izz3*L1**2*l2**2*m2**2*cos(2*q2) - Izz1*L2**2*l3**2*m3**2*cos(2*q3) - Izz2*L1**2*l3**2*m3**2*cos(2*q2 + 2*q3) + L1**2*L2**2*l3**2*m2*m3**2 + 2*Izz3*L1**2*L2**2*m2*m3 + L2**2*l1**2*l3**2*m1*m3**2 + L1**2*l2**2*l3**2*m2*m3**2 + L1**2*l2**2*l3**2*m2**2*m3 + 2*Izz3*L2**2*l1**2*m1*m3 + 2*Izz2*L1**2*l3**2*m2*m3 + 2*Izz3*L1**2*l2**2*m2*m3 + 2*l1**2*l2**2*l3**2*m1*m2*m3 - L1**2*l2**2*l3**2*m2**2*m3*cos(2*q2) - L2**2*l1**2*l3**2*m1*m3**2*cos(2*q3) - L1**2*l2**2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2 - 2*Izz3*L1**2*L2*l2*m2*m3 - L1**2*L2**2*l3**2*m2*m3**2*cos(2*q3) - 2*Izz3*L1**2*L2*l2*m2*m3*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2 + 2*q3) - L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q2) + L1**2*L2*l2*l3**2*m2*m3**2*cos(2*q3))]
    return LgB_distal

def B_distal(q, L, l, m, Ixx, Iyy, Izz, z, lx, ly, nx, ny, pcx, pcy):
    q1 = q[0]

    q1 = q[0]
    q2 = q[1]
    q3 = q[2]
    q4 = q[3]
    q5 = q[4]
    q6 = q[5]

    m1 = m[0]
    m2 = m[1]
    m3 = m[2]

    l1 = l[0]
    l2 = l[1]
    l3 = l[2]

    L1 = L[0]
    L2 = L[1]
    L3 = L[2]

    Ixx1 = Ixx[0]
    Ixx2 = Ixx[1]
    Ixx3 = Ixx[2]

    Iyy1 = Iyy[0]
    Iyy2 = Iyy[1]
    Iyy3 = Iyy[2]

    Izz1 = Izz[0]
    Izz2 = Izz[1]
    Izz3 = Izz[2]

    lx1 = lx[0]
    ly1 = ly[0]
    lx2 = lx[1]
    ly2 = ly[1]
    lx3 = lx[2]
    ly3 = ly[2]

    B_distal = ny*(L2*cos(q1 + q2) - pcy + L1*cos(q1) + ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) - nx*(pcx + L2*sin(q1 + q2) + L1*sin(q1) - lx3*cos(q1 + q2 + q3) + ly3*sin(q1 + q2 + q3)) - q6*(nx*(ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) - ny*(lx3*cos(q1 + q2 + q3) - ly3*sin(q1 + q2 + q3))) - q5*(nx*(L2*cos(q1 + q2) + ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) + ny*(L2*sin(q1 + q2) - lx3*cos(q1 + q2 + q3) + ly3*sin(q1 + q2 + q3))) - q4*(nx*(L2*cos(q1 + q2) + L1*cos(q1) + ly3*cos(q1 + q2 + q3) + lx3*sin(q1 + q2 + q3)) + ny*(L2*sin(q1 + q2) + L1*sin(q1) - lx3*cos(q1 + q2 + q3) + ly3*sin(q1 + q2 + q3)))
    return B_distal


# q = np.array([np.pi / 2, np.pi / 4, -np.pi / 3, 0, 0, 0])
# m = np.array([.5, .5, .5])
# L = np.array([.1, .1, .1])
# l = np.array([.5, .5, .5])
# Ixx = np.ones(3)
# Iyy = np.ones(3)
# Izz = np.ones(3)
# z = 0
# lx = 0.2 * np.ones(3)
# ly = 0.2 * np.ones(3)
# nx = 1
# ny = -1
# pcx = 0
# pcy = 0
#
# t = time.time()
# LgB_distal(q, L, l, m, Ixx, Iyy, Izz, z, lx, ly, nx, ny, pcx, pcy)
# elapsed = time.time() - t
# print(elapsed)